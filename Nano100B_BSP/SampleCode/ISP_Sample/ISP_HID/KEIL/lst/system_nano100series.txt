; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\system_nano100series.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_nano100series.d --feedback=.\obj\NANO100B_ISP_HID_flag.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\system_nano100series.crf ..\..\..\..\Library\Device\Nuvoton\Nano100Series\Source\system_Nano100Series.c]
                          THUMB

                          AREA ||i.SysGet_HCLKFreq||, CODE, READONLY, ALIGN=2

                  SysGet_HCLKFreq PROC
;;;64       */
;;;65     uint32_t SysGet_HCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67     
;;;68         uint32_t u32Freqout, u32AHBDivider, u32ClkSel;
;;;69     
;;;70         u32ClkSel = CLK->CLKSEL0 & CLK_CLKSEL0_HCLK_S_Msk;
000002  4c0d              LDR      r4,|L1.56|
000004  6920              LDR      r0,[r4,#0x10]
000006  0741              LSLS     r1,r0,#29
;;;71     
;;;72         if (u32ClkSel == CLK_CLKSEL0_HCLK_S_HXT)    /* external HXT crystal clock */
;;;73         {
;;;74             u32Freqout = __HXT;
000008  480c              LDR      r0,|L1.60|
00000a  0f49              LSRS     r1,r1,#29             ;70
00000c  d00d              BEQ      |L1.42|
;;;75         }
;;;76         else if(u32ClkSel == CLK_CLKSEL0_HCLK_S_LXT)        /* external LXT crystal clock */
00000e  2901              CMP      r1,#1
000010  d004              BEQ      |L1.28|
;;;77         {
;;;78             u32Freqout = __LXT;
;;;79         }
;;;80         else if(u32ClkSel == CLK_CLKSEL0_HCLK_S_PLL)        /* PLL clock */
000012  2902              CMP      r1,#2
000014  d005              BEQ      |L1.34|
;;;81         {
;;;82             u32Freqout = SysGet_PLLClockFreq();
;;;83         }
;;;84         else if(u32ClkSel == CLK_CLKSEL0_HCLK_S_LIRC)     /* internal LIRC oscillator clock */
000016  2903              CMP      r1,#3
000018  d006              BEQ      |L1.40|
00001a  e006              B        |L1.42|
                  |L1.28|
00001c  2001              MOVS     r0,#1                 ;78
00001e  03c0              LSLS     r0,r0,#15             ;78
000020  e003              B        |L1.42|
                  |L1.34|
000022  f7fffffe          BL       SysGet_PLLClockFreq
000026  e000              B        |L1.42|
                  |L1.40|
;;;85         {
;;;86             u32Freqout = __LIRC;
000028  4805              LDR      r0,|L1.64|
                  |L1.42|
;;;87         }
;;;88         else                                    /* internal HIRC oscillator clock */
;;;89         {
;;;90             u32Freqout = __HIRC12M;
;;;91         }
;;;92         u32AHBDivider = (CLK->CLKDIV0 & CLK_CLKDIV0_HCLK_N_Msk) + 1 ;
00002a  69e1              LDR      r1,[r4,#0x1c]
00002c  0709              LSLS     r1,r1,#28
00002e  0f09              LSRS     r1,r1,#28
000030  1c49              ADDS     r1,r1,#1
;;;93     
;;;94         return (u32Freqout/u32AHBDivider);
000032  f7fffffe          BL       __aeabi_uidivmod
;;;95     }
000036  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  |L1.56|
                          DCD      0x50000200
                  |L1.60|
                          DCD      0x00b71b00
                  |L1.64|
                          DCD      0x00002710

                          AREA ||i.SysGet_PLLClockFreq||, CODE, READONLY, ALIGN=2

                  SysGet_PLLClockFreq PROC
;;;26       */
;;;27     uint32_t SysGet_PLLClockFreq(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29         uint32_t u32Freq =0, u32PLLSrc;
;;;30         uint32_t u32NO, u32NR, u32IN_DV, u32PllReg;
;;;31     
;;;32         u32PllReg = CLK->PLLCTL;
000002  4812              LDR      r0,|L2.76|
000004  6a40              LDR      r0,[r0,#0x24]
;;;33     
;;;34         if (u32PllReg & CLK_PLLCTL_PD)
000006  03c1              LSLS     r1,r0,#15
000008  d501              BPL      |L2.14|
;;;35             return 0;    /* PLL is in power down mode */
00000a  2000              MOVS     r0,#0
;;;36     
;;;37         if (u32PllReg & CLK_PLLCTL_PLL_SRC_Msk)
;;;38             u32PLLSrc = __HIRC12M;
;;;39         else
;;;40             u32PLLSrc = __HXT;
;;;41     
;;;42         u32NO = (u32PllReg & CLK_PLLCTL_OUT_DV) ? 2: 1;
;;;43     
;;;44         u32IN_DV = (u32PllReg & CLK_PLLCTL_IN_DV_Msk) >> 8;
;;;45         if (u32IN_DV == 0)
;;;46             u32NR = 2;
;;;47         else if (u32IN_DV == 1)
;;;48             u32NR = 4;
;;;49         else if (u32IN_DV == 2)
;;;50             u32NR = 8;
;;;51         else
;;;52             u32NR = 16;
;;;53     
;;;54         u32Freq = u32PLLSrc * ((u32PllReg & CLK_PLLCTL_FB_DV_Msk) +32) / u32NR / u32NO;
;;;55     
;;;56         return u32Freq;
;;;57     }
00000c  bd10              POP      {r4,pc}
                  |L2.14|
00000e  04c1              LSLS     r1,r0,#19             ;42
000010  d501              BPL      |L2.22|
000012  2402              MOVS     r4,#2                 ;42
000014  e000              B        |L2.24|
                  |L2.22|
000016  2401              MOVS     r4,#1                 ;42
                  |L2.24|
000018  0581              LSLS     r1,r0,#22             ;44
00001a  0f89              LSRS     r1,r1,#30             ;44
00001c  d00f              BEQ      |L2.62|
00001e  2901              CMP      r1,#1                 ;47
000020  d00f              BEQ      |L2.66|
000022  2902              CMP      r1,#2                 ;49
000024  d00f              BEQ      |L2.70|
000026  2110              MOVS     r1,#0x10              ;52
                  |L2.40|
000028  0680              LSLS     r0,r0,#26             ;54
00002a  0e80              LSRS     r0,r0,#26             ;54
00002c  4a08              LDR      r2,|L2.80|
00002e  3020              ADDS     r0,r0,#0x20           ;54
000030  4350              MULS     r0,r2,r0              ;54
000032  f7fffffe          BL       __aeabi_uidivmod
000036  4621              MOV      r1,r4                 ;54
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  bd10              POP      {r4,pc}
                  |L2.62|
00003e  2102              MOVS     r1,#2                 ;46
000040  e7f2              B        |L2.40|
                  |L2.66|
000042  2104              MOVS     r1,#4                 ;48
000044  e7f0              B        |L2.40|
                  |L2.70|
000046  2108              MOVS     r1,#8                 ;50
000048  e7ee              B        |L2.40|
;;;58     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      0x50000200
                  |L2.80|
                          DCD      0x00b71b00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;104    
;;;105    void SystemCoreClockUpdate (void)
000000  b510              PUSH     {r4,lr}
;;;106    {
;;;107    
;;;108        SystemCoreClock = SysGet_HCLKFreq();
000002  f7fffffe          BL       SysGet_HCLKFreq
000006  4c04              LDR      r4,|L3.24|
;;;109        CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
000008  4904              LDR      r1,|L3.28|
00000a  6020              STR      r0,[r4,#0]  ; SystemCoreClock
00000c  104a              ASRS     r2,r1,#1
00000e  1880              ADDS     r0,r0,r2
000010  f7fffffe          BL       __aeabi_uidivmod
000014  6060              STR      r0,[r4,#4]  ; CyclesPerUs
;;;110    }
000016  bd10              POP      {r4,pc}
;;;111    
                          ENDP

                  |L3.24|
                          DCD      ||.data||
                  |L3.28|
                          DCD      0x000f4240

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00b71b00
                  CyclesPerUs
                          DCD      0x0000000c

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano100Series\\Source\\system_Nano100Series.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_system_Nano100Series_c_5d646a67____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_system_Nano100Series_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_system_Nano100Series_c_5d646a67____REVSH|
#line 402
|__asm___22_system_Nano100Series_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
