; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc_user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc_user.d --feedback=.\obj\NANO100B_ISP_HID_flag.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\fmc_user.crf ..\FMC_USER.c]
                          THUMB

                          AREA ||i.FMC_Erase_User||, CODE, READONLY, ALIGN=2

                  FMC_Erase_User PROC
;;;81      */
;;;82     int FMC_Erase_User(unsigned int u32Addr)
000000  4908              LDR      r1,|L1.36|
;;;83     {
;;;84         unsigned int Reg;
;;;85         FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000002  2222              MOVS     r2,#0x22
000004  60ca              STR      r2,[r1,#0xc]
;;;86         FMC->ISPADR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;87         FMC->ISPTRG = 0x1;
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
;;;88         __ISB();
00000c  f3bf8f6f          ISB      
;;;89         Reg = FMC->ISPCON;
000010  6808              LDR      r0,[r1,#0]
;;;90     
;;;91         if (Reg & FMC_ISPCON_ISPFF_Msk) {
000012  0642              LSLS     r2,r0,#25
000014  d503              BPL      |L1.30|
;;;92             FMC->ISPCON = Reg;
000016  6008              STR      r0,[r1,#0]
;;;93             return -1;
000018  2000              MOVS     r0,#0
00001a  43c0              MVNS     r0,r0
;;;94         }
;;;95     
;;;96         return 0;
;;;97     }
00001c  4770              BX       lr
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;96
000020  4770              BX       lr
;;;98     
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x5000c000

                          AREA ||i.FMC_Read_User||, CODE, READONLY, ALIGN=2

                  FMC_Read_User PROC
;;;49      */
;;;50     int FMC_Read_User(unsigned int u32Addr, unsigned int *data)
000000  4a09              LDR      r2,|L2.40|
;;;51     {
;;;52         unsigned int Reg;
;;;53         FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2300              MOVS     r3,#0
000004  60d3              STR      r3,[r2,#0xc]
;;;54         FMC->ISPADR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;55         FMC->ISPDAT = 0;
000008  6093              STR      r3,[r2,#8]
;;;56         FMC->ISPTRG = 0x1;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
;;;57         __ISB();
00000e  f3bf8f6f          ISB      
;;;58         Reg = FMC->ISPCON;
000012  6810              LDR      r0,[r2,#0]
;;;59     
;;;60         if (Reg & FMC_ISPCON_ISPFF_Msk) {
000014  0643              LSLS     r3,r0,#25
000016  d503              BPL      |L2.32|
;;;61             FMC->ISPCON = Reg;
000018  6010              STR      r0,[r2,#0]
;;;62             return -1;
00001a  2000              MOVS     r0,#0
00001c  43c0              MVNS     r0,r0
;;;63         }
;;;64     
;;;65         *data = FMC->ISPDAT;
;;;66         return 0;
;;;67     }
00001e  4770              BX       lr
                  |L2.32|
000020  6890              LDR      r0,[r2,#8]            ;65
000022  6008              STR      r0,[r1,#0]            ;66
000024  2000              MOVS     r0,#0                 ;66
000026  4770              BX       lr
;;;68     
                          ENDP

                  |L2.40|
                          DCD      0x5000c000

                          AREA ||i.FMC_Write_User||, CODE, READONLY, ALIGN=2

                  FMC_Write_User PROC
;;;17      */
;;;18     int FMC_Write_User(unsigned int u32Addr, unsigned int u32Data)
000000  4a08              LDR      r2,|L3.36|
;;;19     {
;;;20         unsigned int Reg;
;;;21         FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;22         FMC->ISPADR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;23         FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;24         FMC->ISPTRG = 0x1;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
;;;25         __ISB();
00000e  f3bf8f6f          ISB      
;;;26         Reg = FMC->ISPCON;
000012  6810              LDR      r0,[r2,#0]
;;;27     
;;;28         if (Reg & FMC_ISPCON_ISPFF_Msk) {
000014  0641              LSLS     r1,r0,#25
000016  d503              BPL      |L3.32|
;;;29             FMC->ISPCON = Reg;
000018  6010              STR      r0,[r2,#0]
;;;30             return -1;
00001a  2000              MOVS     r0,#0
00001c  43c0              MVNS     r0,r0
;;;31         }
;;;32     
;;;33         return 0;
;;;34     }
00001e  4770              BX       lr
                  |L3.32|
000020  2000              MOVS     r0,#0                 ;33
000022  4770              BX       lr
;;;35     
                          ENDP

                  |L3.36|
                          DCD      0x5000c000

                          AREA ||i.ReadData||, CODE, READONLY, ALIGN=1

                  ReadData PROC
;;;98     
;;;99     void ReadData(unsigned int addr_start, unsigned int addr_end, unsigned int *data)    // Read data from flash
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
;;;101        unsigned int rLoop;
;;;102    
;;;103        for (rLoop = addr_start; rLoop < addr_end; rLoop += 4) {
000008  e005              B        |L4.22|
                  |L4.10|
;;;104            FMC_Read_User(rLoop, data);
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       FMC_Read_User
000012  1d24              ADDS     r4,r4,#4
000014  1d2d              ADDS     r5,r5,#4
                  |L4.22|
000016  42b4              CMP      r4,r6                 ;103
000018  d3f7              BCC      |L4.10|
;;;105            data++;
;;;106        }
;;;107    
;;;108        return;
;;;109    }
00001a  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP


                          AREA ||i.WriteData||, CODE, READONLY, ALIGN=1

                  WriteData PROC
;;;110    
;;;111    void WriteData(unsigned int addr_start, unsigned int addr_end, unsigned int *data)  // Write data into flash
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
;;;113        unsigned int wLoop;
;;;114    
;;;115        for (wLoop = addr_start; wLoop < addr_end; wLoop += 4) {
000008  e005              B        |L5.22|
                  |L5.10|
;;;116            FMC_Write_User(wLoop, *data);
00000a  4620              MOV      r0,r4
00000c  6829              LDR      r1,[r5,#0]
00000e  f7fffffe          BL       FMC_Write_User
000012  1d24              ADDS     r4,r4,#4
000014  1d2d              ADDS     r5,r5,#4
                  |L5.22|
000016  42b4              CMP      r4,r6                 ;115
000018  d3f7              BCC      |L5.10|
;;;117            data++;
;;;118        }
;;;119    }
00001a  bd70              POP      {r4-r6,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FMC_USER.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_FMC_USER_c_825b21e5____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_FMC_USER_c_825b21e5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_FMC_USER_c_825b21e5____REVSH|
#line 402
|__asm___10_FMC_USER_c_825b21e5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
