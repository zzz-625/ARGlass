; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\targetdev.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\targetdev.d --feedback=.\obj\NANO100B_ISP_HID_flag.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\targetdev.crf ..\targetdev.c]
                          THUMB

                          AREA ||i.GetApromSize||, CODE, READONLY, ALIGN=1

                  GetApromSize PROC
;;;5      //the smallest of APROM size is 32K (32K, 64K, 123K)
;;;6      uint32_t GetApromSize()
000000  b538              PUSH     {r3-r5,lr}
;;;7      {
;;;8          uint32_t size = 0x8000, data;
000002  2401              MOVS     r4,#1
000004  03e4              LSLS     r4,r4,#15
                  |L1.6|
;;;9          int result;
;;;10     
;;;11         do {
;;;12             result = FMC_Read_User(size, &data);
000006  4669              MOV      r1,sp
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FMC_Read_User
;;;13     
;;;14             if (result < 0) {
00000e  2800              CMP      r0,#0
000010  da07              BGE      |L1.34|
;;;15                 if (size == 0x20000) {
000012  2001              MOVS     r0,#1
000014  0440              LSLS     r0,r0,#17
000016  4284              CMP      r4,r0
000018  d101              BNE      |L1.30|
;;;16                     size = 123 * 1024;
00001a  247b              MOVS     r4,#0x7b
00001c  02a4              LSLS     r4,r4,#10
                  |L1.30|
;;;17                 }
;;;18     
;;;19                 return size;
00001e  4620              MOV      r0,r4
;;;20             } else {
;;;21                 size *= 2;
;;;22             }
;;;23         } while (1);
;;;24     }
000020  bd38              POP      {r3-r5,pc}
                  |L1.34|
000022  0064              LSLS     r4,r4,#1              ;21
000024  e7ef              B        |L1.6|
;;;25     
                          ENDP


                          AREA ||i.GetDataFlashInfo||, CODE, READONLY, ALIGN=2

                  GetDataFlashInfo PROC
;;;25     
;;;26     void GetDataFlashInfo(uint32_t *addr, uint32_t *size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;27     {
000002  4605              MOV      r5,r0
;;;28         uint32_t uData;
;;;29         *size = 0;
000004  2700              MOVS     r7,#0
000006  460c              MOV      r4,r1                 ;27
;;;30         FMC_Read_User(Config0, &uData);
000008  600f              STR      r7,[r1,#0]
00000a  2003              MOVS     r0,#3
00000c  4669              MOV      r1,sp
00000e  0500              LSLS     r0,r0,#20
000010  f7fffffe          BL       FMC_Read_User
;;;31     
;;;32         if ((uData & 0x01) == 0) { //DFEN enable
000014  9800              LDR      r0,[sp,#0]
;;;33             FMC_Read_User(Config1, &uData);
;;;34     
;;;35             if (uData > g_apromSize || (uData & 0x1FF)) { //avoid config1 value from error
000016  4e0c              LDR      r6,|L2.72|
000018  07c0              LSLS     r0,r0,#31             ;32
00001a  d003              BEQ      |L2.36|
;;;36                 uData = g_apromSize;
;;;37             }
;;;38     
;;;39             *addr = uData;
;;;40             *size = g_apromSize - uData;
;;;41         } else {
;;;42             *addr = g_apromSize;
00001c  6830              LDR      r0,[r6,#0]  ; g_apromSize
;;;43             *size = 0;
00001e  6028              STR      r0,[r5,#0]
000020  6027              STR      r7,[r4,#0]
;;;44         }
;;;45     }
000022  bdf8              POP      {r3-r7,pc}
                  |L2.36|
000024  4669              MOV      r1,sp                 ;33
000026  4809              LDR      r0,|L2.76|
000028  f7fffffe          BL       FMC_Read_User
00002c  9800              LDR      r0,[sp,#0]            ;35
00002e  6831              LDR      r1,[r6,#0]            ;35  ; g_apromSize
000030  4288              CMP      r0,r1                 ;35
000032  d801              BHI      |L2.56|
000034  05c0              LSLS     r0,r0,#23             ;35
000036  d000              BEQ      |L2.58|
                  |L2.56|
000038  9100              STR      r1,[sp,#0]            ;36
                  |L2.58|
00003a  9800              LDR      r0,[sp,#0]            ;39
00003c  6028              STR      r0,[r5,#0]            ;40
00003e  6830              LDR      r0,[r6,#0]            ;40  ; g_apromSize
000040  9900              LDR      r1,[sp,#0]            ;40
000042  1a40              SUBS     r0,r0,r1              ;40
000044  6020              STR      r0,[r4,#0]            ;40
000046  bdf8              POP      {r3-r7,pc}
;;;46     
                          ENDP

                  |L2.72|
                          DCD      g_apromSize
                  |L2.76|
                          DCD      0x00300004

;*** Start embedded assembler ***

#line 1 "..\\targetdev.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_targetdev_c_11f79a65____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_targetdev_c_11f79a65____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_targetdev_c_11f79a65____REVSH|
#line 402
|__asm___11_targetdev_c_11f79a65____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
