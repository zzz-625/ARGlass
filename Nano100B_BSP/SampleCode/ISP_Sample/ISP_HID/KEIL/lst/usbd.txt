; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --feedback=.\obj\NANO100B_ISP_HID_flag.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\usbd.crf ..\..\..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;446     */
;;;447    void USBD_CtrlIn(void)
000000  b570              PUSH     {r4-r6,lr}
;;;448    {
;;;449        if(g_usbd_CtrlInSize)
000002  4c1c              LDR      r4,|L1.116|
000004  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlInSize
000006  2600              MOVS     r6,#0
;;;450        {
;;;451            // Process remained data
;;;452            if(g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize)
;;;453            {
;;;454                // Data size > MXPLD
;;;455                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
000008  4d1b              LDR      r5,|L1.120|
00000a  2800              CMP      r0,#0                 ;449
00000c  d01f              BEQ      |L1.78|
00000e  68a0              LDR      r0,[r4,#8]            ;452  ; g_usbd_CtrlInSize
000010  69e3              LDR      r3,[r4,#0x1c]         ;452  ; g_usbd_CtrlMaxPktSize
000012  4621              MOV      r1,r4                 ;449
000014  4298              CMP      r0,r3                 ;452
000016  4a19              LDR      r2,|L1.124|
000018  6849              LDR      r1,[r1,#4]
;;;456                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
;;;457                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
;;;458                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
;;;459            }
;;;460            else
;;;461            {
;;;462                // Data size <= MXPLD
;;;463                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
00001a  6a28              LDR      r0,[r5,#0x20]
00001c  d90e              BLS      |L1.60|
00001e  1880              ADDS     r0,r0,r2              ;455
000020  69e2              LDR      r2,[r4,#0x1c]         ;455  ; g_usbd_CtrlMaxPktSize
000022  f7fffffe          BL       USBD_MemCopy
000026  69e0              LDR      r0,[r4,#0x1c]         ;456  ; g_usbd_CtrlMaxPktSize
000028  6268              STR      r0,[r5,#0x24]         ;456
00002a  69e1              LDR      r1,[r4,#0x1c]         ;457  ; g_usbd_CtrlMaxPktSize
00002c  6860              LDR      r0,[r4,#4]            ;457  ; g_usbd_CtrlInPointer
00002e  1840              ADDS     r0,r0,r1              ;457
000030  6060              STR      r0,[r4,#4]            ;458  ; g_usbd_CtrlInPointer
000032  68a0              LDR      r0,[r4,#8]            ;458  ; g_usbd_CtrlInSize
000034  69e1              LDR      r1,[r4,#0x1c]         ;458  ; g_usbd_CtrlMaxPktSize
000036  1a40              SUBS     r0,r0,r1              ;458
000038  60a0              STR      r0,[r4,#8]            ;458  ; g_usbd_CtrlInSize
;;;464                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
;;;465                g_usbd_CtrlInPointer = 0;
;;;466                g_usbd_CtrlInSize = 0;
;;;467            }
;;;468        }
;;;469        else
;;;470        {
;;;471            // In ACK for Set address
;;;472            if((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS))
;;;473            {
;;;474                if((USBD_GET_ADDR() != g_usbd_UsbAddr) && (USBD_GET_ADDR() == 0))
;;;475                {
;;;476                    USBD_SET_ADDR(g_usbd_UsbAddr);
;;;477                }
;;;478            }
;;;479    
;;;480            // No more data for IN token
;;;481            USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;482        }
;;;483    }
00003a  bd70              POP      {r4-r6,pc}
                  |L1.60|
00003c  1880              ADDS     r0,r0,r2              ;463
00003e  68a2              LDR      r2,[r4,#8]            ;463  ; g_usbd_CtrlInSize
000040  f7fffffe          BL       USBD_MemCopy
000044  68a0              LDR      r0,[r4,#8]            ;464  ; g_usbd_CtrlInSize
000046  6268              STR      r0,[r5,#0x24]         ;464
000048  6066              STR      r6,[r4,#4]            ;466  ; g_usbd_CtrlInPointer
00004a  60a6              STR      r6,[r4,#8]            ;466  ; g_usbd_CtrlInSize
00004c  bd70              POP      {r4-r6,pc}
                  |L1.78|
00004e  4809              LDR      r0,|L1.116|
000050  303c              ADDS     r0,r0,#0x3c           ;472
000052  7801              LDRB     r1,[r0,#0]            ;472  ; g_usbd_SetupPacket
000054  2900              CMP      r1,#0                 ;472
000056  d10b              BNE      |L1.112|
000058  7840              LDRB     r0,[r0,#1]            ;472  ; g_usbd_SetupPacket
00005a  2805              CMP      r0,#5                 ;472
00005c  d108              BNE      |L1.112|
00005e  6928              LDR      r0,[r5,#0x10]         ;474
000060  69a1              LDR      r1,[r4,#0x18]         ;474  ; g_usbd_UsbAddr
000062  4288              CMP      r0,r1                 ;474
000064  d004              BEQ      |L1.112|
000066  6928              LDR      r0,[r5,#0x10]         ;474
000068  2800              CMP      r0,#0                 ;474
00006a  d101              BNE      |L1.112|
00006c  69a0              LDR      r0,[r4,#0x18]         ;476  ; g_usbd_UsbAddr
00006e  6128              STR      r0,[r5,#0x10]         ;476
                  |L1.112|
000070  626e              STR      r6,[r5,#0x24]         ;481
000072  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP

                  |L1.116|
                          DCD      ||.data||
                  |L1.120|
                          DCD      0x40060000
                  |L1.124|
                          DCD      0x40060100

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;511     */
;;;512    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;513    {
;;;514        uint32_t u32Size;
;;;515    
;;;516        if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
000002  4c0a              LDR      r4,|L2.44|
000004  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000006  6961              LDR      r1,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
000008  4288              CMP      r0,r1
00000a  d20e              BCS      |L2.42|
;;;517        {
;;;518            u32Size = USBD_GET_PAYLOAD_LEN(EP1);
00000c  4808              LDR      r0,|L2.48|
00000e  6b45              LDR      r5,[r0,#0x34]
;;;519            USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1), u32Size);
000010  6b00              LDR      r0,[r0,#0x30]
000012  4908              LDR      r1,|L2.52|
000014  462a              MOV      r2,r5
000016  1841              ADDS     r1,r0,r1
000018  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
00001a  f7fffffe          BL       USBD_MemCopy
;;;520            g_usbd_CtrlOutPointer += u32Size;
00001e  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
000020  1940              ADDS     r0,r0,r5
;;;521            g_usbd_CtrlOutSize += u32Size;
000022  60e0              STR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
000024  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000026  1940              ADDS     r0,r0,r5
000028  6120              STR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
                  |L2.42|
;;;522        }
;;;523    }
00002a  bd70              POP      {r4-r6,pc}
;;;524    
                          ENDP

                  |L2.44|
                          DCD      ||.data||
                  |L2.48|
                          DCD      0x40060000
                  |L2.52|
                          DCD      0x40060100

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;152     */
;;;153    void USBD_GetDescriptor(void)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
;;;155        uint32_t u32Len;
;;;156    
;;;157        u32Len = 0;
;;;158        u32Len = g_usbd_SetupPacket[7];
000002  4b28              LDR      r3,|L3.164|
;;;159        u32Len <<= 8;
;;;160        u32Len += g_usbd_SetupPacket[6];
;;;161    
;;;162        switch (g_usbd_SetupPacket[3])
;;;163        {
;;;164        // Get Device Descriptor
;;;165        case DESC_DEVICE:
;;;166        {
;;;167            u32Len = Minimum(u32Len, LEN_DEVICE);
;;;168            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
;;;169            USBD_PrepareCtrlOut(0,0);
;;;170            break;
;;;171        }
;;;172        // Get Configuration Descriptor
;;;173        case DESC_CONFIG:
;;;174        {
;;;175            uint32_t u32TotalLen;
;;;176    
;;;177            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
;;;178            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;179    
;;;180            u32Len = Minimum(u32Len, u32TotalLen);
;;;181            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
;;;182            USBD_PrepareCtrlOut(0,0);
;;;183            break;
;;;184        }
;;;185        // Get HID Descriptor
;;;186        case DESC_HID:
;;;187        {
;;;188            /* CV3.0 HID Class Descriptor Test,
;;;189               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;190            uint32_t u32ConfigDescOffset;   // u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index)
;;;191            u32Len = Minimum(u32Len, LEN_HID);
;;;192            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
;;;193            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
;;;194            USBD_PrepareCtrlOut(0,0);
;;;195            break;
;;;196        }
;;;197        // Get Report Descriptor
;;;198        case DESC_HID_RPT:
;;;199        {
;;;200            u32Len = Minimum(u32Len, g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]]);
;;;201            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
;;;202            USBD_PrepareCtrlOut(0,0);
;;;203            break;
;;;204        }
;;;205        // Get String Descriptor
;;;206        case DESC_STRING:
;;;207        {
;;;208            // Get String Descriptor
;;;209            if(g_usbd_SetupPacket[2] < 4)
;;;210            {
;;;211                u32Len = Minimum(u32Len, g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0]);
;;;212                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
;;;213                USBD_PrepareCtrlOut(0, 0);
;;;214            }
;;;215            else
;;;216            {
;;;217                // Not support. Reply STALL.
;;;218                USBD_SET_EP_STALL(EP0);
000004  4c28              LDR      r4,|L3.168|
000006  79d8              LDRB     r0,[r3,#7]            ;158  ; g_usbd_SetupPacket
000008  7999              LDRB     r1,[r3,#6]            ;160  ; g_usbd_SetupPacket
00000a  0200              LSLS     r0,r0,#8              ;159
00000c  1809              ADDS     r1,r1,r0              ;160
00000e  4618              MOV      r0,r3                 ;168
000010  78da              LDRB     r2,[r3,#3]            ;162  ; g_usbd_SetupPacket
000012  383c              SUBS     r0,r0,#0x3c           ;168
000014  1565              ASRS     r5,r4,#21
000016  6b80              LDR      r0,[r0,#0x38]         ;168
000018  2a03              CMP      r2,#3                 ;162
00001a  d030              BEQ      |L3.126|
00001c  dc04              BGT      |L3.40|
00001e  2a01              CMP      r2,#1                 ;162
000020  d00a              BEQ      |L3.56|
000022  2a02              CMP      r2,#2                 ;162
000024  d136              BNE      |L3.148|
000026  e00c              B        |L3.66|
                  |L3.40|
000028  4b1e              LDR      r3,|L3.164|
00002a  791b              LDRB     r3,[r3,#4]            ;192
00002c  009b              LSLS     r3,r3,#2              ;192
00002e  2a21              CMP      r2,#0x21              ;162
000030  d00f              BEQ      |L3.82|
000032  2a22              CMP      r2,#0x22              ;162
000034  d12e              BNE      |L3.148|
000036  e014              B        |L3.98|
                  |L3.56|
000038  2912              CMP      r1,#0x12              ;167
00003a  d300              BCC      |L3.62|
00003c  2112              MOVS     r1,#0x12              ;167
                  |L3.62|
00003e  6800              LDR      r0,[r0,#0]            ;168
000040  e016              B        |L3.112|
                  |L3.66|
000042  6840              LDR      r0,[r0,#4]            ;177
000044  78c2              LDRB     r2,[r0,#3]            ;177
000046  7883              LDRB     r3,[r0,#2]            ;178
000048  0212              LSLS     r2,r2,#8              ;178
00004a  189a              ADDS     r2,r3,r2              ;178
00004c  4291              CMP      r1,r2                 ;180
00004e  d30f              BCC      |L3.112|
000050  e01e              B        |L3.144|
                  |L3.82|
000052  2909              CMP      r1,#9                 ;191
000054  d300              BCC      |L3.88|
000056  2109              MOVS     r1,#9                 ;191
                  |L3.88|
000058  6942              LDR      r2,[r0,#0x14]         ;192
00005a  6840              LDR      r0,[r0,#4]            ;193
00005c  58d2              LDR      r2,[r2,r3]            ;192
00005e  1880              ADDS     r0,r0,r2              ;193
000060  e006              B        |L3.112|
                  |L3.98|
000062  6902              LDR      r2,[r0,#0x10]         ;200
000064  58d2              LDR      r2,[r2,r3]            ;200
000066  428a              CMP      r2,r1                 ;200
000068  d800              BHI      |L3.108|
00006a  4611              MOV      r1,r2                 ;200
                  |L3.108|
00006c  68c0              LDR      r0,[r0,#0xc]          ;201
00006e  58c0              LDR      r0,[r0,r3]            ;201
                  |L3.112|
000070  f7fffffe          BL       USBD_PrepareCtrlIn
000074  2100              MOVS     r1,#0                 ;202
000076  4608              MOV      r0,r1                 ;202
000078  f7fffffe          BL       USBD_PrepareCtrlOut
;;;219                USBD_SET_EP_STALL(EP1);
;;;220            }
;;;221            break;
;;;222        }
;;;223        default:
;;;224            // Not support. Reply STALL.
;;;225            USBD_SET_EP_STALL(EP0);
;;;226            USBD_SET_EP_STALL(EP1);
;;;227            break;
;;;228        }
;;;229    }
00007c  bd70              POP      {r4-r6,pc}
                  |L3.126|
00007e  789a              LDRB     r2,[r3,#2]            ;209  ; g_usbd_SetupPacket
000080  2a04              CMP      r2,#4                 ;209
000082  d207              BCS      |L3.148|
000084  6880              LDR      r0,[r0,#8]            ;211
000086  0092              LSLS     r2,r2,#2              ;211
000088  5880              LDR      r0,[r0,r2]            ;211
00008a  7802              LDRB     r2,[r0,#0]            ;211
00008c  428a              CMP      r2,r1                 ;211
00008e  d8ef              BHI      |L3.112|
                  |L3.144|
000090  4611              MOV      r1,r2                 ;211
000092  e7ed              B        |L3.112|
                  |L3.148|
000094  6aa0              LDR      r0,[r4,#0x28]         ;225
000096  4328              ORRS     r0,r0,r5              ;225
000098  62a0              STR      r0,[r4,#0x28]         ;225
00009a  6ba0              LDR      r0,[r4,#0x38]         ;226
00009c  4328              ORRS     r0,r0,r5              ;226
00009e  63a0              STR      r0,[r4,#0x38]         ;226
0000a0  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      ||.data||+0x3c
                  |L3.168|
                          DCD      0x40060000

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;91      */
;;;92     void USBD_GetSetupPacket(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;93     {
;;;94         USBD_MemCopy(buf, g_usbd_SetupPacket, 8);
000002  2208              MOVS     r2,#8
000004  4901              LDR      r1,|L4.12|
000006  f7fffffe          BL       USBD_MemCopy
;;;95     }
00000a  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  |L4.12|
                          DCD      ||.data||+0x3c

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;569    
;;;570    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;571    {
;;;572        g_u32EpStallLock = u32EpBitmap;
000002  6348              STR      r0,[r1,#0x34]  ; g_u32EpStallLock
;;;573    }
000004  4770              BX       lr
;;;574    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;392      */
;;;393    static __INLINE void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
000000  e003              B        |L6.10|
                  |L6.2|
;;;394    {
;;;395        while (size--) *dest++ = *src++;
000002  780b              LDRB     r3,[r1,#0]
000004  7003              STRB     r3,[r0,#0]
000006  1c40              ADDS     r0,r0,#1
000008  1c49              ADDS     r1,r1,#1
                  |L6.10|
00000a  1e52              SUBS     r2,r2,#1
00000c  d2f9              BCS      |L6.2|
;;;396    }
00000e  4770              BX       lr
;;;397    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;49       */
;;;50     void USBD_Open(S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  4b0a              LDR      r3,|L7.44|
;;;51     {
;;;52         g_usbd_sInfo = param;
;;;53         g_usbd_pfnClassRequest = pfnClassReq;
;;;54         g_usbd_pfnSetInterface = pfnSetInterface;
;;;55     
;;;56         /* get EP0 maximum packet size */
;;;57         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
000002  631a              STR      r2,[r3,#0x30]  ; g_usbd_pfnSetInterface
000004  62d9              STR      r1,[r3,#0x2c]  ; g_usbd_pfnClassRequest
000006  6398              STR      r0,[r3,#0x38]  ; g_usbd_sInfo
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
00000c  61d8              STR      r0,[r3,#0x1c]  ; g_usbd_CtrlMaxPktSize
;;;58     
;;;59         /* Initial USB engine */
;;;60         USBD->CTL = 0x29f;
00000e  4809              LDR      r0,|L7.52|
000010  4907              LDR      r1,|L7.48|
000012  6001              STR      r1,[r0,#0]
;;;61         USBD->PDMA |= USBD_PDMA_BYTEM_Msk;
000014  4907              LDR      r1,|L7.52|
000016  3180              ADDS     r1,r1,#0x80
000018  6a4a              LDR      r2,[r1,#0x24]
00001a  2304              MOVS     r3,#4
00001c  431a              ORRS     r2,r2,r3
00001e  624a              STR      r2,[r1,#0x24]
;;;62         /* Force SE0, and then clear it to connect*/
;;;63         USBD_SET_SE0();
000020  6801              LDR      r1,[r0,#0]
000022  2210              MOVS     r2,#0x10
000024  4311              ORRS     r1,r1,r2
000026  6001              STR      r1,[r0,#0]
;;;64     }
000028  4770              BX       lr
;;;65     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      ||.data||
                  |L7.48|
                          DCD      0x0000029f
                  |L7.52|
                          DCD      0x40060000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;415     */
;;;416    void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size)
000000  b570              PUSH     {r4-r6,lr}
;;;417    {
;;;418        if(u32Size > g_usbd_CtrlMaxPktSize)
000002  4c15              LDR      r4,|L8.88|
000004  460d              MOV      r5,r1                 ;417
000006  69e3              LDR      r3,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
;;;419        {
;;;420            // Data size > MXPLD
;;;421            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
;;;422            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
;;;423            USBD_SET_DATA1(EP0);
000008  4e14              LDR      r6,|L8.92|
00000a  2180              MOVS     r1,#0x80
;;;424            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, g_usbd_CtrlMaxPktSize);
00000c  4a14              LDR      r2,|L8.96|
00000e  429d              CMP      r5,r3                 ;418
000010  d912              BLS      |L8.56|
000012  69e3              LDR      r3,[r4,#0x1c]         ;421  ; g_usbd_CtrlMaxPktSize
000014  18c3              ADDS     r3,r0,r3              ;421
000016  6063              STR      r3,[r4,#4]            ;422  ; g_usbd_CtrlInPointer
000018  69e3              LDR      r3,[r4,#0x1c]         ;422  ; g_usbd_CtrlMaxPktSize
00001a  1aeb              SUBS     r3,r5,r3              ;422
00001c  60a3              STR      r3,[r4,#8]            ;422  ; g_usbd_CtrlInSize
00001e  6ab3              LDR      r3,[r6,#0x28]         ;423
000020  430b              ORRS     r3,r3,r1              ;423
000022  62b3              STR      r3,[r6,#0x28]         ;423
000024  6a31              LDR      r1,[r6,#0x20]
000026  188b              ADDS     r3,r1,r2
000028  69e2              LDR      r2,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
00002a  4601              MOV      r1,r0
00002c  4618              MOV      r0,r3
00002e  f7fffffe          BL       USBD_MemCopy
;;;425            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000032  69e0              LDR      r0,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
000034  6270              STR      r0,[r6,#0x24]
;;;426        }
;;;427        else
;;;428        {
;;;429            // Data size <= MXPLD
;;;430            g_usbd_CtrlInPointer = 0;
;;;431            g_usbd_CtrlInSize = 0;
;;;432            USBD_SET_DATA1(EP0);
;;;433            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, u32Size);
;;;434            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
;;;435        }
;;;436    }
000036  bd70              POP      {r4-r6,pc}
                  |L8.56|
000038  2300              MOVS     r3,#0                 ;430
00003a  6063              STR      r3,[r4,#4]            ;431  ; g_usbd_CtrlInPointer
00003c  60a3              STR      r3,[r4,#8]            ;431  ; g_usbd_CtrlInSize
00003e  6ab3              LDR      r3,[r6,#0x28]         ;432
000040  430b              ORRS     r3,r3,r1              ;432
000042  62b3              STR      r3,[r6,#0x28]         ;432
000044  6a31              LDR      r1,[r6,#0x20]         ;433
000046  188b              ADDS     r3,r1,r2              ;433
000048  4601              MOV      r1,r0                 ;433
00004a  462a              MOV      r2,r5                 ;433
00004c  4618              MOV      r0,r3                 ;433
00004e  f7fffffe          BL       USBD_MemCopy
000052  6275              STR      r5,[r6,#0x24]         ;434
000054  bd70              POP      {r4-r6,pc}
;;;437    
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      ||.data||
                  |L8.92|
                          DCD      0x40060000
                  |L8.96|
                          DCD      0x40060100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;494     */
;;;495    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a04              LDR      r2,|L9.20|
;;;496    {
;;;497        g_usbd_CtrlOutPointer = pu8Buf;
;;;498        g_usbd_CtrlOutSize = 0;
000002  60d0              STR      r0,[r2,#0xc]  ; g_usbd_CtrlOutPointer
000004  2000              MOVS     r0,#0
000006  6110              STR      r0,[r2,#0x10]  ; g_usbd_CtrlOutSize
;;;499        g_usbd_CtrlOutSizeLimit = u32Size;
000008  6151              STR      r1,[r2,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;500        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000a  69d0              LDR      r0,[r2,#0x1c]  ; g_usbd_CtrlMaxPktSize
00000c  4902              LDR      r1,|L9.24|
00000e  6348              STR      r0,[r1,#0x34]
;;;501    }
000010  4770              BX       lr
;;;502    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||
                  |L9.24|
                          DCD      0x40060000

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;105     */
;;;106    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108        // Setup packet process
;;;109        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE, 8);
000002  2208              MOVS     r2,#8
000004  4910              LDR      r1,|L10.72|
000006  4811              LDR      r0,|L10.76|
000008  f7fffffe          BL       USBD_MemCopy
;;;110    
;;;111        switch (g_usbd_SetupPacket[0] & 0x60)   /* request type */
00000c  480f              LDR      r0,|L10.76|
00000e  2160              MOVS     r1,#0x60
000010  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
000012  4008              ANDS     r0,r0,r1
000014  d00e              BEQ      |L10.52|
;;;112        {
;;;113        case REQ_STANDARD:   // Standard
;;;114        {
;;;115            USBD_StandardRequest();
;;;116            break;
;;;117        }
;;;118        case REQ_CLASS:   // Class
;;;119        {
;;;120            if (g_usbd_pfnClassRequest != NULL)
000016  490d              LDR      r1,|L10.76|
000018  393c              SUBS     r1,r1,#0x3c
00001a  2820              CMP      r0,#0x20              ;111
00001c  d00d              BEQ      |L10.58|
00001e  2840              CMP      r0,#0x40              ;111
000020  d00d              BEQ      |L10.62|
;;;121            {
;;;122                g_usbd_pfnClassRequest();
;;;123            }
;;;124            break;
;;;125        }
;;;126        case REQ_VENDOR:   // Vendor
;;;127        {
;;;128            if (g_usbd_pfnVendorRequest != NULL)
;;;129            {
;;;130                g_usbd_pfnVendorRequest();
;;;131            }
;;;132            break;
;;;133        }
;;;134        default:   // reserved
;;;135        {
;;;136            /* Setup error, stall the device */
;;;137            USBD_SET_EP_STALL(EP0);
000022  480b              LDR      r0,|L10.80|
000024  6a81              LDR      r1,[r0,#0x28]
000026  1542              ASRS     r2,r0,#21
000028  4311              ORRS     r1,r1,r2
00002a  6281              STR      r1,[r0,#0x28]
;;;138            USBD_SET_EP_STALL(EP1);
00002c  6b81              LDR      r1,[r0,#0x38]
00002e  4311              ORRS     r1,r1,r2
000030  6381              STR      r1,[r0,#0x38]
;;;139            break;
;;;140        }
;;;141        }
;;;142    }
000032  bd10              POP      {r4,pc}
                  |L10.52|
000034  f7fffffe          BL       USBD_StandardRequest
                  |L10.56|
000038  bd10              POP      {r4,pc}
                  |L10.58|
00003a  6ac8              LDR      r0,[r1,#0x2c]         ;120  ; g_usbd_pfnClassRequest
00003c  e000              B        |L10.64|
                  |L10.62|
00003e  6a88              LDR      r0,[r1,#0x28]         ;128  ; g_usbd_pfnVendorRequest
                  |L10.64|
000040  2800              CMP      r0,#0                 ;120
000042  d0f9              BEQ      |L10.56|
000044  4780              BLX      r0                    ;130
000046  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  |L10.72|
                          DCD      0x40060100
                  |L10.76|
                          DCD      ||.data||+0x3c
                  |L10.80|
                          DCD      0x40060000

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;563     */
;;;564    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L11.8|
;;;565    {
;;;566        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  6288              STR      r0,[r1,#0x28]  ; g_usbd_pfnVendorRequest
;;;567    }
000004  4770              BX       lr
;;;568    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;239     */
;;;240    void USBD_StandardRequest(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;241    {
;;;242        /* clear global variables for new request */
;;;243        g_usbd_CtrlInPointer = 0;
000002  496b              LDR      r1,|L12.432|
000004  2500              MOVS     r5,#0
;;;244        g_usbd_CtrlInSize = 0;
000006  604d              STR      r5,[r1,#4]  ; g_usbd_CtrlInPointer
000008  608d              STR      r5,[r1,#8]  ; g_usbd_CtrlInSize
;;;245    
;;;246        if (g_usbd_SetupPacket[0] & 0x80)   /* request data transfer direction */
00000a  460c              MOV      r4,r1
00000c  343c              ADDS     r4,r4,#0x3c
;;;247        {
;;;248            // Device to host
;;;249            switch (g_usbd_SetupPacket[1])
;;;250            {
;;;251            case GET_CONFIGURATION:
;;;252            {
;;;253                // Return current configuration setting
;;;254                /* Data stage */
;;;255                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbConfig;
;;;256                USBD_SET_DATA1(EP0);
;;;257                USBD_SET_PAYLOAD_LEN(EP0, 1);
;;;258                /* Status stage */
;;;259                USBD_PrepareCtrlOut(0,0);
;;;260                break;
;;;261            }
;;;262            case GET_DESCRIPTOR:
;;;263            {
;;;264                USBD_GetDescriptor();
;;;265                break;
;;;266            }
;;;267            case GET_INTERFACE:
;;;268            {
;;;269                // Return current interface setting
;;;270                /* Data stage */
;;;271                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbAltInterface;
;;;272                USBD_SET_DATA1(EP0);
;;;273                USBD_SET_PAYLOAD_LEN(EP0, 1);
;;;274                /* Status stage */
;;;275                USBD_PrepareCtrlOut(0,0);
;;;276                break;
;;;277            }
;;;278            case GET_STATUS:
;;;279            {
;;;280                // Device
;;;281                if(g_usbd_SetupPacket[0] == 0x80)
;;;282                {
;;;283                    uint8_t u8Tmp;
;;;284    
;;;285                    u8Tmp = 0;
;;;286                    if(g_usbd_sInfo->gu8ConfigDesc[7] & 0x40) u8Tmp |= 1; // Self-Powered/Bus-Powered.
;;;287                    if(g_usbd_sInfo->gu8ConfigDesc[7] & 0x20) u8Tmp |= (g_usbd_RemoteWakeupEn << 1); // Remote wake up
;;;288    
;;;289                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = u8Tmp;
;;;290                }
;;;291                // Interface
;;;292                else if (g_usbd_SetupPacket[0] == 0x81)
;;;293                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = 0;
;;;294                // Endpoint
;;;295                else if (g_usbd_SetupPacket[0] == 0x82)
;;;296                {
;;;297                    uint8_t ep = g_usbd_SetupPacket[4] & 0xF;
00000e  7922              LDRB     r2,[r4,#4]
000010  4608              MOV      r0,r1                 ;246
000012  303c              ADDS     r0,r0,#0x3c           ;246
000014  0713              LSLS     r3,r2,#28
000016  7800              LDRB     r0,[r0,#0]            ;246  ; g_usbd_SetupPacket
000018  7862              LDRB     r2,[r4,#1]            ;249
00001a  0607              LSLS     r7,r0,#24             ;246
00001c  0f1b              LSRS     r3,r3,#28
00001e  4c65              LDR      r4,|L12.436|
000020  2680              MOVS     r6,#0x80              ;256
000022  2f00              CMP      r7,#0                 ;246
000024  da5d              BGE      |L12.226|
000026  4f64              LDR      r7,|L12.440|
000028  2a00              CMP      r2,#0                 ;249
00002a  d019              BEQ      |L12.96|
00002c  2a06              CMP      r2,#6                 ;249
00002e  d006              BEQ      |L12.62|
000030  2a08              CMP      r2,#8                 ;249
000032  d002              BEQ      |L12.58|
000034  2a0a              CMP      r2,#0xa               ;249
000036  d14b              BNE      |L12.208|
000038  e004              B        |L12.68|
                  |L12.58|
00003a  6a48              LDR      r0,[r1,#0x24]         ;255  ; g_usbd_UsbConfig
00003c  e003              B        |L12.70|
                  |L12.62|
00003e  f7fffffe          BL       USBD_GetDescriptor
;;;298                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = USBD_GetStall(ep)? 1 : 0;
;;;299                }
;;;300    
;;;301                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1) = 0;
;;;302                /* Data stage */
;;;303                USBD_SET_DATA1(EP0);
;;;304                USBD_SET_PAYLOAD_LEN(EP0, 2);
;;;305                /* Status stage */
;;;306                USBD_PrepareCtrlOut(0,0);
;;;307                break;
;;;308            }
;;;309            default:
;;;310            {
;;;311                /* Setup error, stall the device */
;;;312                USBD_SET_EP_STALL(EP0);
;;;313                USBD_SET_EP_STALL(EP1);
;;;314                break;
;;;315            }
;;;316            }
;;;317        }
;;;318        else
;;;319        {
;;;320            // Host to device
;;;321            switch (g_usbd_SetupPacket[1])
;;;322            {
;;;323            case CLEAR_FEATURE:
;;;324            {
;;;325                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;326                {
;;;327    
;;;328                    int32_t epNum, i;
;;;329    
;;;330                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;331                       a flag: g_u32EpStallLock is added to support it */
;;;332                    epNum = g_usbd_SetupPacket[4] & 0xF;
;;;333                    for(i = 0; i < USBD_MAX_EP; i++)
;;;334                    {
;;;335                        if(((USBD->EP[i].CFG & 0xF) == epNum) && ((g_u32EpStallLock & (1 << i)) == 0))
;;;336                            USBD->EP[i].CFG &= ~(USBD_CFG_SSTALL_Msk | USBD_CFG_DSQ_SYNC_Msk);
;;;337                    }
;;;338                }
;;;339                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;340                    g_usbd_RemoteWakeupEn = 0;
;;;341                /* Status stage */
;;;342                USBD_SET_DATA1(EP0);
;;;343                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;344                break;
;;;345            }
;;;346            case SET_ADDRESS:
;;;347            {
;;;348                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
;;;349    
;;;350                // DATA IN for end of setup
;;;351                /* Status Stage */
;;;352                USBD_SET_DATA1(EP0);
;;;353                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;354                break;
;;;355            }
;;;356            case SET_CONFIGURATION:
;;;357            {
;;;358                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
;;;359    
;;;360                if (g_usbd_UsbConfig == 0)
;;;361                {
;;;362                    int volatile i;
;;;363                    /* Reset PID DATA0 */
;;;364                    for (i=2; i<USBD_MAX_EP; i++)
;;;365                        USBD->EP[i].CFG &= ~USBD_CFG_DSQ_SYNC_Msk;
;;;366                }
;;;367                // DATA IN for end of setup
;;;368                /* Status stage */
;;;369                USBD_SET_DATA1(EP0);
;;;370                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;371    
;;;372                break;
;;;373            }
;;;374            case SET_FEATURE:
;;;375            {
;;;376                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;377                    USBD_SetStall(g_usbd_SetupPacket[4] & 0xF);
;;;378                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;379                    g_usbd_RemoteWakeupEn = 1;
;;;380                /* Status stage */
;;;381                USBD_SET_DATA1(EP0);
;;;382                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;383                break;
;;;384            }
;;;385            case SET_INTERFACE:
;;;386            {
;;;387                g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
;;;388                if (g_usbd_pfnSetInterface != NULL)
;;;389                    g_usbd_pfnSetInterface(g_usbd_UsbAltInterface);
;;;390                /* Status stage */
;;;391                USBD_SET_DATA1(EP0);
;;;392                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;393                break;
;;;394            }
;;;395            default:
;;;396            {
;;;397                /* Setup error, stall the device */
;;;398                USBD_SET_EP_STALL(EP0);
;;;399                USBD_SET_EP_STALL(EP1);
;;;400                break;
;;;401            }
;;;402            }
;;;403        }
;;;404    }
000042  bdf8              POP      {r3-r7,pc}
                  |L12.68|
000044  6a08              LDR      r0,[r1,#0x20]         ;271  ; g_usbd_UsbAltInterface
                  |L12.70|
000046  6a21              LDR      r1,[r4,#0x20]         ;255
000048  19c9              ADDS     r1,r1,r7              ;255
00004a  7008              STRB     r0,[r1,#0]            ;255
00004c  6aa0              LDR      r0,[r4,#0x28]         ;256
00004e  4330              ORRS     r0,r0,r6              ;256
000050  62a0              STR      r0,[r4,#0x28]         ;256
000052  2001              MOVS     r0,#1                 ;257
                  |L12.84|
000054  6260              STR      r0,[r4,#0x24]         ;257
000056  2100              MOVS     r1,#0                 ;259
000058  4608              MOV      r0,r1                 ;259
00005a  f7fffffe          BL       USBD_PrepareCtrlOut
00005e  bdf8              POP      {r3-r7,pc}
                  |L12.96|
000060  2880              CMP      r0,#0x80              ;281
000062  d004              BEQ      |L12.110|
000064  2881              CMP      r0,#0x81              ;292
000066  d010              BEQ      |L12.138|
000068  2882              CMP      r0,#0x82              ;295
00006a  d012              BEQ      |L12.146|
00006c  e028              B        |L12.192|
                  |L12.110|
00006e  6b8a              LDR      r2,[r1,#0x38]         ;286  ; g_usbd_sInfo
000070  2000              MOVS     r0,#0                 ;285
000072  6852              LDR      r2,[r2,#4]            ;286
000074  79d2              LDRB     r2,[r2,#7]            ;286
000076  0653              LSLS     r3,r2,#25             ;286
000078  d500              BPL      |L12.124|
00007a  2001              MOVS     r0,#1                 ;286
                  |L12.124|
00007c  0692              LSLS     r2,r2,#26             ;287
00007e  d51c              BPL      |L12.186|
000080  7809              LDRB     r1,[r1,#0]            ;287  ; g_usbd_RemoteWakeupEn
000082  0049              LSLS     r1,r1,#1              ;287
000084  4301              ORRS     r1,r1,r0              ;287
000086  b2c8              UXTB     r0,r1                 ;287
000088  e017              B        |L12.186|
                  |L12.138|
00008a  6a20              LDR      r0,[r4,#0x20]         ;293
00008c  19c0              ADDS     r0,r0,r7              ;293
00008e  7005              STRB     r5,[r0,#0]            ;293
000090  e016              B        |L12.192|
                  |L12.146|
000092  2000              MOVS     r0,#0                 ;293
                  |L12.148|
000094  4947              LDR      r1,|L12.436|
000096  0102              LSLS     r2,r0,#4              ;293
000098  3128              ADDS     r1,r1,#0x28           ;293
00009a  1851              ADDS     r1,r2,r1              ;293
00009c  6809              LDR      r1,[r1,#0]            ;293
00009e  070a              LSLS     r2,r1,#28             ;293
0000a0  0f12              LSRS     r2,r2,#28             ;293
0000a2  429a              CMP      r2,r3                 ;293
0000a4  d002              BEQ      |L12.172|
0000a6  1c40              ADDS     r0,r0,#1              ;293
0000a8  2808              CMP      r0,#8                 ;293
0000aa  dbf3              BLT      |L12.148|
                  |L12.172|
0000ac  2001              MOVS     r0,#1                 ;293
0000ae  0240              LSLS     r0,r0,#9              ;293
0000b0  4201              TST      r1,r0                 ;293
0000b2  d001              BEQ      |L12.184|
0000b4  2001              MOVS     r0,#1                 ;298
0000b6  e000              B        |L12.186|
                  |L12.184|
0000b8  2000              MOVS     r0,#0                 ;298
                  |L12.186|
0000ba  6a21              LDR      r1,[r4,#0x20]         ;298
0000bc  19c9              ADDS     r1,r1,r7              ;298
0000be  7008              STRB     r0,[r1,#0]            ;298
                  |L12.192|
0000c0  6a20              LDR      r0,[r4,#0x20]         ;301
0000c2  19c0              ADDS     r0,r0,r7              ;301
0000c4  7045              STRB     r5,[r0,#1]            ;301
0000c6  6aa0              LDR      r0,[r4,#0x28]         ;303
0000c8  4330              ORRS     r0,r0,r6              ;303
0000ca  62a0              STR      r0,[r4,#0x28]         ;303
0000cc  2002              MOVS     r0,#2                 ;304
0000ce  e7c1              B        |L12.84|
                  |L12.208|
0000d0  6aa1              LDR      r1,[r4,#0x28]         ;312
0000d2  2001              MOVS     r0,#1                 ;312
0000d4  0240              LSLS     r0,r0,#9              ;312
0000d6  4301              ORRS     r1,r1,r0              ;312
0000d8  62a1              STR      r1,[r4,#0x28]         ;312
0000da  6ba1              LDR      r1,[r4,#0x38]         ;313
0000dc  4301              ORRS     r1,r1,r0              ;313
0000de  63a1              STR      r1,[r4,#0x38]         ;313
0000e0  bdf8              POP      {r3-r7,pc}
                  |L12.226|
0000e2  4833              LDR      r0,|L12.432|
0000e4  303c              ADDS     r0,r0,#0x3c           ;246
0000e6  7880              LDRB     r0,[r0,#2]            ;325
0000e8  2a05              CMP      r2,#5                 ;321
0000ea  d037              BEQ      |L12.348|
0000ec  dc08              BGT      |L12.256|
0000ee  2a01              CMP      r2,#1                 ;321
0000f0  d011              BEQ      |L12.278|
0000f2  2a03              CMP      r2,#3                 ;321
0000f4  d1ec              BNE      |L12.208|
0000f6  2800              CMP      r0,#0                 ;376
0000f8  d045              BEQ      |L12.390|
0000fa  2801              CMP      r0,#1                 ;378
0000fc  d055              BEQ      |L12.426|
0000fe  e028              B        |L12.338|
                  |L12.256|
000100  2a09              CMP      r2,#9                 ;321
000102  d02d              BEQ      |L12.352|
000104  2a0b              CMP      r2,#0xb               ;321
000106  d1e3              BNE      |L12.208|
000108  6208              STR      r0,[r1,#0x20]         ;387  ; g_usbd_UsbAltInterface
00010a  6b0a              LDR      r2,[r1,#0x30]         ;388  ; g_usbd_pfnSetInterface
00010c  2a00              CMP      r2,#0                 ;388
00010e  d020              BEQ      |L12.338|
000110  6a08              LDR      r0,[r1,#0x20]         ;389  ; g_usbd_UsbAltInterface
000112  4790              BLX      r2                    ;389
000114  e01d              B        |L12.338|
                  |L12.278|
000116  2800              CMP      r0,#0                 ;325
000118  d002              BEQ      |L12.288|
00011a  2801              CMP      r0,#1                 ;339
00011c  d018              BEQ      |L12.336|
00011e  e018              B        |L12.338|
                  |L12.288|
000120  6b49              LDR      r1,[r1,#0x34]         ;335
000122  2000              MOVS     r0,#0                 ;333
000124  468c              MOV      r12,r1                ;335
                  |L12.294|
000126  0101              LSLS     r1,r0,#4              ;335
000128  1909              ADDS     r1,r1,r4              ;335
00012a  6a8a              LDR      r2,[r1,#0x28]         ;335
00012c  0712              LSLS     r2,r2,#28             ;335
00012e  0f12              LSRS     r2,r2,#28             ;335
000130  429a              CMP      r2,r3                 ;335
000132  d109              BNE      |L12.328|
000134  2201              MOVS     r2,#1                 ;335
000136  4082              LSLS     r2,r2,r0              ;335
000138  4667              MOV      r7,r12                ;335
00013a  423a              TST      r2,r7                 ;335
00013c  d104              BNE      |L12.328|
00013e  6a8a              LDR      r2,[r1,#0x28]         ;336
000140  2705              MOVS     r7,#5                 ;336
000142  01ff              LSLS     r7,r7,#7              ;336
000144  43ba              BICS     r2,r2,r7              ;336
000146  628a              STR      r2,[r1,#0x28]         ;336
                  |L12.328|
000148  1c40              ADDS     r0,r0,#1              ;336
00014a  2808              CMP      r0,#8                 ;333
00014c  dbeb              BLT      |L12.294|
00014e  e000              B        |L12.338|
                  |L12.336|
000150  700d              STRB     r5,[r1,#0]            ;340
                  |L12.338|
000152  6aa0              LDR      r0,[r4,#0x28]         ;342
000154  4330              ORRS     r0,r0,r6              ;342
000156  62a0              STR      r0,[r4,#0x28]         ;342
000158  6265              STR      r5,[r4,#0x24]         ;343
00015a  bdf8              POP      {r3-r7,pc}
                  |L12.348|
00015c  6188              STR      r0,[r1,#0x18]         ;348  ; g_usbd_UsbAddr
00015e  e7f8              B        |L12.338|
                  |L12.352|
000160  6248              STR      r0,[r1,#0x24]         ;358  ; g_usbd_UsbConfig
000162  6a48              LDR      r0,[r1,#0x24]         ;360  ; g_usbd_UsbConfig
000164  2800              CMP      r0,#0                 ;360
000166  d1f4              BNE      |L12.338|
000168  2002              MOVS     r0,#2                 ;364
00016a  4912              LDR      r1,|L12.436|
00016c  9000              STR      r0,[sp,#0]            ;364
00016e  3128              ADDS     r1,r1,#0x28           ;364
                  |L12.368|
000170  0100              LSLS     r0,r0,#4              ;365
000172  1840              ADDS     r0,r0,r1              ;365
000174  6802              LDR      r2,[r0,#0]            ;365
000176  43b2              BICS     r2,r2,r6              ;365
000178  6002              STR      r2,[r0,#0]            ;365
00017a  9800              LDR      r0,[sp,#0]            ;364
00017c  1c40              ADDS     r0,r0,#1              ;364
00017e  9000              STR      r0,[sp,#0]            ;364
000180  2808              CMP      r0,#8                 ;364
000182  dbf5              BLT      |L12.368|
000184  e7e5              B        |L12.338|
                  |L12.390|
000186  490b              LDR      r1,|L12.436|
000188  0102              LSLS     r2,r0,#4              ;364
00018a  3128              ADDS     r1,r1,#0x28           ;364
00018c  1852              ADDS     r2,r2,r1              ;364
00018e  6811              LDR      r1,[r2,#0]            ;364
000190  070f              LSLS     r7,r1,#28             ;364
000192  0f3f              LSRS     r7,r7,#28             ;364
000194  429f              CMP      r7,r3                 ;364
000196  d104              BNE      |L12.418|
000198  2001              MOVS     r0,#1                 ;364
00019a  0240              LSLS     r0,r0,#9              ;364
00019c  4301              ORRS     r1,r1,r0              ;364
00019e  6011              STR      r1,[r2,#0]            ;364
0001a0  e7d7              B        |L12.338|
                  |L12.418|
0001a2  1c40              ADDS     r0,r0,#1              ;364
0001a4  2808              CMP      r0,#8                 ;364
0001a6  dbee              BLT      |L12.390|
0001a8  e7d3              B        |L12.338|
                  |L12.426|
0001aa  2001              MOVS     r0,#1                 ;379
0001ac  7008              STRB     r0,[r1,#0]            ;379
0001ae  e7d0              B        |L12.338|
;;;405    
                          ENDP

                  |L12.432|
                          DCD      ||.data||
                  |L12.436|
                          DCD      0x40060000
                  |L12.440|
                          DCD      0x40060100

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;74      */
;;;75     void USBD_Start(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         /* Enable USB-related interrupts. */
;;;78         USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
000002  4c06              LDR      r4,|L13.28|
000004  68a0              LDR      r0,[r4,#8]
000006  210f              MOVS     r1,#0xf
000008  4308              ORRS     r0,r0,r1
00000a  60a0              STR      r0,[r4,#8]
;;;79         CLK_SysTickDelay(100000);
00000c  4804              LDR      r0,|L13.32|
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;80         USBD_CLR_SE0();
000012  6820              LDR      r0,[r4,#0]
000014  2110              MOVS     r1,#0x10
000016  4388              BICS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
;;;81     }
00001a  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  |L13.28|
                          DCD      0x40060000
                  |L13.32|
                          DCD      0x000186a0

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;533     */
;;;534    void USBD_SwReset(void)
000000  b530              PUSH     {r4,r5,lr}
;;;535    {
;;;536        int i;
;;;537    
;;;538        // Reset all variables for protocol
;;;539        g_usbd_CtrlInPointer = 0;
000002  480b              LDR      r0,|L14.48|
000004  2300              MOVS     r3,#0
;;;540        g_usbd_CtrlInSize = 0;
000006  6043              STR      r3,[r0,#4]  ; g_usbd_CtrlInPointer
000008  6083              STR      r3,[r0,#8]  ; g_usbd_CtrlInSize
;;;541        g_usbd_CtrlOutPointer = 0;
;;;542        g_usbd_CtrlOutSize = 0;
00000a  60c3              STR      r3,[r0,#0xc]  ; g_usbd_CtrlOutPointer
00000c  6103              STR      r3,[r0,#0x10]  ; g_usbd_CtrlOutSize
;;;543        g_usbd_CtrlOutSizeLimit = 0;
00000e  6143              STR      r3,[r0,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;544        memset(g_usbd_SetupPacket, 0, 8);
000010  63c3              STR      r3,[r0,#0x3c]  ; g_usbd_SetupPacket
;;;545    
;;;546        /* Reset PID DATA0 */
;;;547        for (i=0; i<USBD_MAX_EP; i++)
000012  6403              STR      r3,[r0,#0x40]  ; g_usbd_SetupPacket
;;;548            USBD->EP[i].CFG &= ~USBD_CFG_DSQ_SYNC_Msk;
000014  4a07              LDR      r2,|L14.52|
000016  4618              MOV      r0,r3                 ;547
000018  2480              MOVS     r4,#0x80
                  |L14.26|
00001a  0101              LSLS     r1,r0,#4
00001c  1889              ADDS     r1,r1,r2
00001e  6a8d              LDR      r5,[r1,#0x28]
000020  43a5              BICS     r5,r5,r4
000022  628d              STR      r5,[r1,#0x28]
000024  1c40              ADDS     r0,r0,#1
000026  2808              CMP      r0,#8                 ;547
000028  dbf7              BLT      |L14.26|
;;;549    
;;;550        // Reset USB device address
;;;551        USBD_SET_ADDR(0);
00002a  6113              STR      r3,[r2,#0x10]
;;;552    }
00002c  bd30              POP      {r4,r5,pc}
;;;553    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      ||.data||
                  |L14.52|
                          DCD      0x40060000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_RemoteWakeupEn
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_SetupPacket
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
