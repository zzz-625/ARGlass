; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\isp_user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\isp_user.d --feedback=.\obj\NANO100B_ISP_HID_flag.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\isp_user.crf ..\ISP_USER.c]
                          THUMB

                          AREA ||i.Checksum||, CODE, READONLY, ALIGN=1

                  Checksum PROC
;;;20     
;;;21     static uint16_t Checksum(unsigned char *buf, int len)
000000  4603              MOV      r3,r0
;;;22     {
000002  b510              PUSH     {r4,lr}
;;;23         int i;
;;;24         uint16_t c;
;;;25     
;;;26         for (c = 0, i = 0 ; i < len; i++) {
000004  2000              MOVS     r0,#0
000006  4602              MOV      r2,r0
000008  e003              B        |L1.18|
                  |L1.10|
;;;27             c += buf[i];
00000a  5c9c              LDRB     r4,[r3,r2]
00000c  1820              ADDS     r0,r4,r0
00000e  b280              UXTH     r0,r0
000010  1c52              ADDS     r2,r2,#1
                  |L1.18|
000012  428a              CMP      r2,r1                 ;26
000014  dbf9              BLT      |L1.10|
;;;28         }
;;;29     
;;;30         return (c);
;;;31     }
000016  bd10              POP      {r4,pc}
;;;32     
                          ENDP


                          AREA ||i.EraseAP||, CODE, READONLY, ALIGN=1

                  EraseAP PROC
;;;51     //bAprom == TRUE erase all aprom besides data flash
;;;52     void EraseAP(unsigned int addr_start, unsigned int addr_end)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;54         unsigned int eraseLoop = addr_start;
;;;55     
;;;56         for (; eraseLoop < addr_end; eraseLoop += FMC_FLASH_PAGE_SIZE) {
000006  e005              B        |L2.20|
                  |L2.8|
;;;57             FMC_Erase_User(eraseLoop);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FMC_Erase_User
00000e  34ff              ADDS     r4,r4,#0xff
000010  34ff              ADDS     r4,r4,#0xff
000012  3402              ADDS     r4,#2
                  |L2.20|
000014  42ac              CMP      r4,r5                 ;56
000016  d3f7              BCC      |L2.8|
;;;58         }
;;;59     
;;;60         return;
;;;61     }
000018  bd70              POP      {r4-r6,pc}
;;;62     
                          ENDP


                          AREA ||i.ParseCmd||, CODE, READONLY, ALIGN=2

                  ParseCmd PROC
;;;77     
;;;78     int ParseCmd(unsigned char *buffer, uint8_t len)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;79     {
000002  b083              SUB      sp,sp,#0xc
;;;80         static uint32_t StartAddress, StartAddress_bak, TotalLen, TotalLen_bak, LastDataLen, g_packno = 1;
;;;81         uint8_t *response;
;;;82         uint16_t lcksum;
;;;83         uint32_t lcmd, srclen, i, regcnf0, security;
;;;84         unsigned char *pSrc;
;;;85         static uint32_t gcmd;
;;;86         response = response_buff;
;;;87         pSrc = buffer;
;;;88         srclen = len;
;;;89         lcmd = inpw(pSrc);
000004  9f03              LDR      r7,[sp,#0xc]
000006  4d9e              LDR      r5,|L3.640|
000008  9e04              LDR      r6,[sp,#0x10]
00000a  683c              LDR      r4,[r7,#0]
;;;90         outpw(response + 4, 0);
00000c  2000              MOVS     r0,#0
00000e  6068              STR      r0,[r5,#4]
;;;91         pSrc += 8;
;;;92         srclen -= 8;
;;;93         ReadData(Config0, Config0 + 8, (uint32_t *)(response + 8)); //read config
000010  462a              MOV      r2,r5
000012  3208              ADDS     r2,r2,#8
000014  2003              MOVS     r0,#3
000016  499b              LDR      r1,|L3.644|
000018  0500              LSLS     r0,r0,#20
00001a  3e08              SUBS     r6,r6,#8
00001c  3708              ADDS     r7,r7,#8
00001e  9200              STR      r2,[sp,#0]
000020  f7fffffe          BL       ReadData
;;;94         regcnf0 = *(uint32_t *)(response + 8);
000024  68a8              LDR      r0,[r5,#8]
;;;95         security = regcnf0 & 0x2;
000026  2102              MOVS     r1,#2
000028  9001              STR      r0,[sp,#4]
00002a  4008              ANDS     r0,r0,r1
;;;96     
;;;97         if (lcmd == CMD_SYNC_PACKNO) {
00002c  9002              STR      r0,[sp,#8]
00002e  2ca4              CMP      r4,#0xa4
000030  d01c              BEQ      |L3.108|
;;;98             g_packno = inpw(pSrc);
;;;99         }
;;;100    
;;;101        if ((lcmd) && (lcmd != CMD_RESEND_PACKET)) {
000032  2c00              CMP      r4,#0
000034  d020              BEQ      |L3.120|
000036  2cff              CMP      r4,#0xff
000038  d07b              BEQ      |L3.306|
                  |L3.58|
;;;102            gcmd = lcmd;
00003a  4893              LDR      r0,|L3.648|
;;;103        }
;;;104    
;;;105        if (lcmd == CMD_GET_FWVER) {
00003c  2ca6              CMP      r4,#0xa6
00003e  6184              STR      r4,[r0,#0x18]  ; gcmd
000040  d018              BEQ      |L3.116|
;;;106            response[8] = FW_VERSION;//version 2.3
;;;107        } else if (lcmd == CMD_GET_DEVICEID) {
;;;108            outpw(response + 8, SYS->PDID);
000042  2005              MOVS     r0,#5
000044  0700              LSLS     r0,r0,#28
000046  2cb1              CMP      r4,#0xb1              ;107
000048  d017              BEQ      |L3.122|
;;;109            goto out;
;;;110        } else if (lcmd == CMD_RUN_APROM || lcmd == CMD_RUN_LDROM || lcmd == CMD_RESET) {
00004a  2cab              CMP      r4,#0xab
00004c  d018              BEQ      |L3.128|
00004e  2cac              CMP      r4,#0xac
000050  d016              BEQ      |L3.128|
000052  2cad              CMP      r4,#0xad
000054  d014              BEQ      |L3.128|
;;;111            outpw(&SYS->RST_SRC, 3);//clear bit
;;;112    
;;;113            /* Set BS */
;;;114            if (lcmd == CMD_RUN_APROM) {
;;;115    			FMC_Write_User(DATA_FLASH_VER_BASE + 24, 0);
;;;116    			FMC_ENABLE_CFG_UPDATE();
;;;117    
;;;118    			FMC_Write_User(Config0, 0xFFFFFFFE);
;;;119    			
;;;120    			FMC_DISABLE_CFG_UPDATE();
;;;121                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;122            } else if (lcmd == CMD_RUN_LDROM) {
;;;123                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;124                i |= 0x00000002;
;;;125            } else {
;;;126                i = (FMC->ISPCON & 0xFFFFFFFE);//ISP disable
;;;127            }
;;;128    
;;;129            outpw(&FMC->ISPCON, i);
;;;130            outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
;;;131    
;;;132    		SYS->IPRST_CTL1 = SYS_IPRST_CTL1_CHIP_RST_Msk;
;;;133            /* Trap the CPU */
;;;134            while (1);
;;;135        } else if (lcmd == CMD_CONNECT) {
000056  2cae              CMP      r4,#0xae
000058  d03f              BEQ      |L3.218|
;;;136            g_packno = 1;
;;;137            goto out;
;;;138        } else if (lcmd == CMD_DISCONNECT) {
00005a  2caf              CMP      r4,#0xaf
00005c  d041              BEQ      |L3.226|
;;;139            return 0;
;;;140        } else if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_ERASE_ALL)) {
00005e  2ca0              CMP      r4,#0xa0
000060  d042              BEQ      |L3.232|
000062  2ca3              CMP      r4,#0xa3
000064  d040              BEQ      |L3.232|
;;;141            EraseAP(FMC_APROM_BASE, (g_apromSize < g_dataFlashAddr) ? g_apromSize : g_dataFlashAddr); // erase APROM // g_dataFlashAddr, g_apromSize
;;;142    
;;;143            if (lcmd == CMD_ERASE_ALL) { //erase data flash
;;;144                EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;145                *(uint32_t *)(response + 8) = regcnf0 | 0x02;
;;;146                UpdateConfig((uint32_t *)(response + 8), NULL);
;;;147            }
;;;148    
;;;149            bUpdateApromCmd = TRUE;
;;;150        } else if (lcmd == CMD_GET_FLASHMODE) {
000066  2cca              CMP      r4,#0xca
000068  d064              BEQ      |L3.308|
00006a  e059              B        |L3.288|
                  |L3.108|
00006c  6839              LDR      r1,[r7,#0]            ;98
00006e  4886              LDR      r0,|L3.648|
000070  6141              STR      r1,[r0,#0x14]         ;98  ; g_packno
000072  e7e2              B        |L3.58|
                  |L3.116|
000074  2031              MOVS     r0,#0x31              ;106
000076  7228              STRB     r0,[r5,#8]            ;106
                  |L3.120|
000078  e07a              B        |L3.368|
                  |L3.122|
00007a  6800              LDR      r0,[r0,#0]            ;108
00007c  60a8              STR      r0,[r5,#8]            ;108
00007e  e0f3              B        |L3.616|
                  |L3.128|
000080  2103              MOVS     r1,#3                 ;111
000082  4605              MOV      r5,r0                 ;111
000084  6041              STR      r1,[r0,#4]            ;111
000086  2cab              CMP      r4,#0xab              ;114
000088  d00d              BEQ      |L3.166|
00008a  4880              LDR      r0,|L3.652|
00008c  2cac              CMP      r4,#0xac              ;122
00008e  6800              LDR      r0,[r0,#0]            ;126
000090  d01e              BEQ      |L3.208|
000092  0840              LSRS     r0,r0,#1              ;126
000094  0040              LSLS     r0,r0,#1              ;126
                  |L3.150|
000096  497d              LDR      r1,|L3.652|
000098  6008              STR      r0,[r1,#0]            ;129
00009a  497e              LDR      r1,|L3.660|
00009c  487c              LDR      r0,|L3.656|
00009e  60c8              STR      r0,[r1,#0xc]          ;130
0000a0  2001              MOVS     r0,#1                 ;132
0000a2  60a8              STR      r0,[r5,#8]            ;132
                  |L3.164|
0000a4  e7fe              B        |L3.164|
                  |L3.166|
0000a6  2100              MOVS     r1,#0                 ;115
0000a8  487b              LDR      r0,|L3.664|
0000aa  f7fffffe          BL       FMC_Write_User
0000ae  4c77              LDR      r4,|L3.652|
0000b0  6820              LDR      r0,[r4,#0]            ;116
0000b2  2610              MOVS     r6,#0x10              ;116
0000b4  4330              ORRS     r0,r0,r6              ;116
0000b6  6020              STR      r0,[r4,#0]            ;116
0000b8  2101              MOVS     r1,#1                 ;118
0000ba  43c9              MVNS     r1,r1                 ;118
0000bc  01a0              LSLS     r0,r4,#6              ;118
0000be  f7fffffe          BL       FMC_Write_User
0000c2  6820              LDR      r0,[r4,#0]            ;120
0000c4  43b0              BICS     r0,r0,r6              ;120
0000c6  6020              STR      r0,[r4,#0]            ;120
0000c8  6820              LDR      r0,[r4,#0]            ;121
0000ca  0880              LSRS     r0,r0,#2              ;121
0000cc  0080              LSLS     r0,r0,#2              ;121
0000ce  e7e2              B        |L3.150|
                  |L3.208|
0000d0  0880              LSRS     r0,r0,#2              ;123
0000d2  0080              LSLS     r0,r0,#2              ;123
0000d4  2102              MOVS     r1,#2                 ;124
0000d6  4308              ORRS     r0,r0,r1              ;124
0000d8  e7dd              B        |L3.150|
                  |L3.218|
0000da  496b              LDR      r1,|L3.648|
0000dc  2001              MOVS     r0,#1                 ;136
0000de  6148              STR      r0,[r1,#0x14]         ;137  ; g_packno
0000e0  e0c2              B        |L3.616|
                  |L3.226|
0000e2  2000              MOVS     r0,#0                 ;139
;;;151            //return 1: APROM, 2: LDROM
;;;152            outpw(response + 8, (FMC->ISPCON & 0x2) ? 2 : 1);
;;;153        }
;;;154    
;;;155        if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_UPDATE_DATAFLASH)) {
;;;156            if (lcmd == CMD_UPDATE_DATAFLASH) {
;;;157                StartAddress = g_dataFlashAddr;
;;;158    
;;;159                if (g_dataFlashSize) { //g_dataFlashAddr
;;;160                    EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;161                } else {
;;;162                    goto out;
;;;163                }
;;;164            } else {
;;;165                StartAddress = 0;
;;;166            }
;;;167    
;;;168            //StartAddress = inpw(pSrc);
;;;169            TotalLen = inpw(pSrc + 4);
;;;170            pSrc += 8;
;;;171            srclen -= 8;
;;;172            StartAddress_bak = StartAddress;
;;;173            TotalLen_bak = TotalLen;
;;;174        } else if (lcmd == CMD_UPDATE_CONFIG) {
;;;175            if ((security == 0) && (!bUpdateApromCmd)) { //security lock
;;;176                goto out;
;;;177            }
;;;178    
;;;179            UpdateConfig((uint32_t *)(pSrc), (uint32_t *)(response + 8));
;;;180            GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
;;;181            goto out;
;;;182        } else if (lcmd == CMD_RESEND_PACKET) { //for APROM&Data flash only
;;;183            StartAddress -= LastDataLen;
;;;184            TotalLen += LastDataLen;
;;;185    
;;;186            if ((StartAddress & 0xFFE00) >= Config0) {
;;;187                goto out;
;;;188            }
;;;189    
;;;190            ReadData(StartAddress & 0xFFE00, StartAddress, (uint32_t *)aprom_buf);
;;;191            FMC_Erase_User(StartAddress & 0xFFE00);
;;;192            WriteData(StartAddress & 0xFFE00, StartAddress, (uint32_t *)aprom_buf);
;;;193    
;;;194            if ((StartAddress % FMC_FLASH_PAGE_SIZE) >= (FMC_FLASH_PAGE_SIZE - LastDataLen)) {
;;;195                FMC_Erase_User((StartAddress & 0xFFE00) + FMC_FLASH_PAGE_SIZE);
;;;196            }
;;;197    
;;;198            goto out;
;;;199        }
;;;200    
;;;201        if ((gcmd == CMD_UPDATE_APROM) || (gcmd == CMD_UPDATE_DATAFLASH)) {
;;;202            if (TotalLen < srclen) {
;;;203                srclen = TotalLen;//prevent last package from over writing
;;;204            }
;;;205    
;;;206            TotalLen -= srclen;
;;;207            WriteData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc); //WriteData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc);
;;;208            memset(pSrc, 0, srclen);
;;;209            ReadData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc);
;;;210            StartAddress += srclen;
;;;211            LastDataLen =  srclen;
;;;212    
;;;213            if (TotalLen == 0) {
;;;214                lcksum = CalCheckSum(StartAddress_bak, TotalLen_bak);
;;;215                outps(response + 8, lcksum);
;;;216            }
;;;217        }
;;;218    
;;;219    out:
;;;220        lcksum = Checksum(buffer, len);
;;;221        outps(response, lcksum);
;;;222        ++g_packno;
;;;223        outpw(response + 4, g_packno);
;;;224        g_packno++;
;;;225        return 0;
;;;226    }
0000e4  b005              ADD      sp,sp,#0x14
0000e6  bdf0              POP      {r4-r7,pc}
                  |L3.232|
0000e8  4867              LDR      r0,|L3.648|
0000ea  6a01              LDR      r1,[r0,#0x20]         ;141  ; g_apromSize
0000ec  6a40              LDR      r0,[r0,#0x24]         ;141  ; g_dataFlashAddr
0000ee  4281              CMP      r1,r0                 ;141
0000f0  d300              BCC      |L3.244|
0000f2  4601              MOV      r1,r0                 ;141
                  |L3.244|
0000f4  2000              MOVS     r0,#0                 ;141
0000f6  f7fffffe          BL       EraseAP
0000fa  2ca3              CMP      r4,#0xa3              ;143
0000fc  d10d              BNE      |L3.282|
0000fe  4962              LDR      r1,|L3.648|
000100  6a48              LDR      r0,[r1,#0x24]         ;144  ; g_dataFlashAddr
000102  6a89              LDR      r1,[r1,#0x28]         ;144  ; g_dataFlashSize
000104  1841              ADDS     r1,r0,r1              ;144
000106  f7fffffe          BL       EraseAP
00010a  9801              LDR      r0,[sp,#4]            ;145
00010c  2102              MOVS     r1,#2                 ;145
00010e  4308              ORRS     r0,r0,r1              ;145
000110  60a8              STR      r0,[r5,#8]            ;146
000112  2100              MOVS     r1,#0                 ;146
000114  9800              LDR      r0,[sp,#0]            ;146
000116  f7fffffe          BL       UpdateConfig
                  |L3.282|
00011a  495b              LDR      r1,|L3.648|
00011c  2001              MOVS     r0,#1                 ;149
00011e  61c8              STR      r0,[r1,#0x1c]         ;149  ; bUpdateApromCmd
                  |L3.288|
000120  2ca0              CMP      r4,#0xa0              ;155
000122  d01a              BEQ      |L3.346|
000124  2cc3              CMP      r4,#0xc3              ;155
000126  d00e              BEQ      |L3.326|
000128  2ca1              CMP      r4,#0xa1              ;174
00012a  d028              BEQ      |L3.382|
00012c  2cff              CMP      r4,#0xff              ;182
00012e  d035              BEQ      |L3.412|
000130  e01e              B        |L3.368|
                  |L3.306|
000132  e033              B        |L3.412|
                  |L3.308|
000134  4855              LDR      r0,|L3.652|
000136  6800              LDR      r0,[r0,#0]            ;152
000138  0780              LSLS     r0,r0,#30             ;152
00013a  d501              BPL      |L3.320|
00013c  2002              MOVS     r0,#2                 ;152
00013e  e000              B        |L3.322|
                  |L3.320|
000140  2001              MOVS     r0,#1                 ;152
                  |L3.322|
000142  60a8              STR      r0,[r5,#8]            ;152
000144  e014              B        |L3.368|
                  |L3.326|
000146  4950              LDR      r1,|L3.648|
000148  6a48              LDR      r0,[r1,#0x24]         ;157  ; g_dataFlashAddr
00014a  6008              STR      r0,[r1,#0]            ;159  ; StartAddress
00014c  6a89              LDR      r1,[r1,#0x28]         ;159  ; g_dataFlashSize
00014e  2900              CMP      r1,#0                 ;159
000150  d014              BEQ      |L3.380|
000152  1841              ADDS     r1,r0,r1              ;160
000154  f7fffffe          BL       EraseAP
000158  e002              B        |L3.352|
                  |L3.346|
00015a  494b              LDR      r1,|L3.648|
00015c  2000              MOVS     r0,#0                 ;165
00015e  6008              STR      r0,[r1,#0]            ;165  ; StartAddress
                  |L3.352|
000160  6878              LDR      r0,[r7,#4]            ;169
000162  4949              LDR      r1,|L3.648|
000164  3e08              SUBS     r6,r6,#8              ;173
000166  6088              STR      r0,[r1,#8]            ;172  ; TotalLen
000168  680a              LDR      r2,[r1,#0]            ;172  ; StartAddress
00016a  604a              STR      r2,[r1,#4]            ;173  ; StartAddress_bak
00016c  3708              ADDS     r7,r7,#8              ;173
00016e  60c8              STR      r0,[r1,#0xc]          ;173  ; TotalLen_bak
                  |L3.368|
000170  4c45              LDR      r4,|L3.648|
000172  69a0              LDR      r0,[r4,#0x18]         ;201  ; gcmd
000174  28a0              CMP      r0,#0xa0              ;201
000176  d03b              BEQ      |L3.496|
000178  28c3              CMP      r0,#0xc3              ;201
00017a  d039              BEQ      |L3.496|
                  |L3.380|
00017c  e074              B        |L3.616|
                  |L3.382|
00017e  4942              LDR      r1,|L3.648|
000180  9802              LDR      r0,[sp,#8]            ;175
000182  69c9              LDR      r1,[r1,#0x1c]         ;175  ; bUpdateApromCmd
000184  4308              ORRS     r0,r0,r1              ;175
000186  d06f              BEQ      |L3.616|
000188  4638              MOV      r0,r7                 ;179
00018a  9900              LDR      r1,[sp,#0]            ;179
00018c  f7fffffe          BL       UpdateConfig
000190  493d              LDR      r1,|L3.648|
000192  3128              ADDS     r1,r1,#0x28           ;180
000194  1f08              SUBS     r0,r1,#4              ;180
000196  f7fffffe          BL       GetDataFlashInfo
00019a  e065              B        |L3.616|
                  |L3.412|
00019c  4c3a              LDR      r4,|L3.648|
00019e  4e3f              LDR      r6,|L3.668|
0001a0  6821              LDR      r1,[r4,#0]            ;183  ; StartAddress
0001a2  6920              LDR      r0,[r4,#0x10]         ;183  ; LastDataLen
0001a4  1a09              SUBS     r1,r1,r0              ;183
0001a6  6021              STR      r1,[r4,#0]            ;184  ; StartAddress
0001a8  68a2              LDR      r2,[r4,#8]            ;184  ; TotalLen
0001aa  1810              ADDS     r0,r2,r0              ;184
0001ac  60a0              STR      r0,[r4,#8]            ;190  ; TotalLen
0001ae  4a34              LDR      r2,|L3.640|
0001b0  4608              MOV      r0,r1                 ;190
0001b2  4030              ANDS     r0,r0,r6              ;190
0001b4  3240              ADDS     r2,r2,#0x40           ;190
0001b6  f7fffffe          BL       ReadData
0001ba  6820              LDR      r0,[r4,#0]            ;191  ; StartAddress
0001bc  4030              ANDS     r0,r0,r6              ;191
0001be  f7fffffe          BL       FMC_Erase_User
0001c2  6820              LDR      r0,[r4,#0]            ;192  ; StartAddress
0001c4  4a2e              LDR      r2,|L3.640|
0001c6  4601              MOV      r1,r0                 ;192
0001c8  4030              ANDS     r0,r0,r6              ;192
0001ca  3240              ADDS     r2,r2,#0x40           ;192
0001cc  f7fffffe          BL       WriteData
0001d0  6820              LDR      r0,[r4,#0]            ;194  ; StartAddress
0001d2  2101              MOVS     r1,#1                 ;194
0001d4  6923              LDR      r3,[r4,#0x10]         ;194  ; LastDataLen
0001d6  05c2              LSLS     r2,r0,#23             ;194
0001d8  0249              LSLS     r1,r1,#9              ;194
0001da  0dd2              LSRS     r2,r2,#23             ;194
0001dc  1ac9              SUBS     r1,r1,r3              ;194
0001de  428a              CMP      r2,r1                 ;194
0001e0  d342              BCC      |L3.616|
0001e2  4030              ANDS     r0,r0,r6              ;195
0001e4  30ff              ADDS     r0,r0,#0xff           ;195
0001e6  30ff              ADDS     r0,r0,#0xff           ;195
0001e8  3002              ADDS     r0,#2                 ;195
0001ea  f7fffffe          BL       FMC_Erase_User
0001ee  e03b              B        |L3.616|
                  |L3.496|
0001f0  68a0              LDR      r0,[r4,#8]            ;202  ; TotalLen
0001f2  42b0              CMP      r0,r6                 ;202
0001f4  d200              BCS      |L3.504|
0001f6  4606              MOV      r6,r0                 ;203
                  |L3.504|
0001f8  1b80              SUBS     r0,r0,r6              ;206
0001fa  60a0              STR      r0,[r4,#8]            ;207  ; TotalLen
0001fc  6820              LDR      r0,[r4,#0]            ;207  ; StartAddress
0001fe  463a              MOV      r2,r7                 ;207
000200  1981              ADDS     r1,r0,r6              ;207
000202  f7fffffe          BL       WriteData
000206  4631              MOV      r1,r6                 ;208
000208  4638              MOV      r0,r7                 ;208
00020a  f7fffffe          BL       __aeabi_memclr
00020e  6820              LDR      r0,[r4,#0]            ;209  ; StartAddress
000210  463a              MOV      r2,r7                 ;209
000212  1981              ADDS     r1,r0,r6              ;209
000214  f7fffffe          BL       ReadData
000218  6820              LDR      r0,[r4,#0]            ;210  ; StartAddress
00021a  6126              STR      r6,[r4,#0x10]         ;213  ; LastDataLen
00021c  1980              ADDS     r0,r0,r6              ;210
00021e  6020              STR      r0,[r4,#0]            ;213  ; StartAddress
000220  68a0              LDR      r0,[r4,#8]            ;213  ; TotalLen
000222  2800              CMP      r0,#0                 ;213
000224  d120              BNE      |L3.616|
000226  6860              LDR      r0,[r4,#4]            ;214  ; StartAddress_bak
000228  9000              STR      r0,[sp,#0]            ;214
00022a  2600              MOVS     r6,#0                 ;214
00022c  68e7              LDR      r7,[r4,#0xc]          ;214  ; TotalLen_bak
00022e  4634              MOV      r4,r6                 ;214
000230  e017              B        |L3.610|
                  |L3.562|
000232  9800              LDR      r0,[sp,#0]            ;214
000234  4a12              LDR      r2,|L3.640|
000236  1900              ADDS     r0,r0,r4              ;214
000238  1dc1              ADDS     r1,r0,#7              ;214
00023a  31ff              ADDS     r1,r1,#0xff           ;214
00023c  31fa              ADDS     r1,r1,#0xfa           ;214
00023e  3240              ADDS     r2,r2,#0x40           ;214
000240  f7fffffe          BL       ReadData
000244  2101              MOVS     r1,#1                 ;214
000246  1b38              SUBS     r0,r7,r4              ;214
000248  0249              LSLS     r1,r1,#9              ;214
00024a  4288              CMP      r0,r1                 ;214
00024c  d200              BCS      |L3.592|
00024e  4601              MOV      r1,r0                 ;214
                  |L3.592|
000250  480b              LDR      r0,|L3.640|
000252  3040              ADDS     r0,r0,#0x40           ;214
000254  f7fffffe          BL       Checksum
000258  1980              ADDS     r0,r0,r6              ;214
00025a  34ff              ADDS     r4,r4,#0xff           ;214
00025c  34ff              ADDS     r4,r4,#0xff           ;214
00025e  b286              UXTH     r6,r0                 ;214
000260  3402              ADDS     r4,#2                 ;214
                  |L3.610|
000262  42bc              CMP      r4,r7                 ;214
000264  d3e5              BCC      |L3.562|
000266  812e              STRH     r6,[r5,#8]            ;215
                  |L3.616|
000268  9904              LDR      r1,[sp,#0x10]         ;220
00026a  9803              LDR      r0,[sp,#0xc]          ;220
00026c  f7fffffe          BL       Checksum
000270  8028              STRH     r0,[r5,#0]            ;221
000272  4905              LDR      r1,|L3.648|
000274  6948              LDR      r0,[r1,#0x14]         ;222  ; g_packno
000276  1c40              ADDS     r0,r0,#1              ;222
000278  6068              STR      r0,[r5,#4]            ;223
00027a  1c40              ADDS     r0,r0,#1              ;223
00027c  6148              STR      r0,[r1,#0x14]         ;225  ; g_packno
00027e  e730              B        |L3.226|
;;;227    
                          ENDP

                  |L3.640|
                          DCD      ||.bss||
                  |L3.644|
                          DCD      0x00300008
                  |L3.648|
                          DCD      ||.data||
                  |L3.652|
                          DCD      0x5000c000
                  |L3.656|
                          DCD      0x05fa0004
                  |L3.660|
                          DCD      0xe000ed00
                  |L3.664|
                          DCD      0x0000fe18
                  |L3.668|
                          DCD      0x000ffe00

                          AREA ||i.UpdateConfig||, CODE, READONLY, ALIGN=2

                  UpdateConfig PROC
;;;62     
;;;63     void UpdateConfig(unsigned int *data, unsigned int *res)
000000  b5f8              PUSH     {r3-r7,lr}
;;;64     {
;;;65         FMC_ENABLE_CFG_UPDATE();
000002  4e10              LDR      r6,|L4.68|
000004  4605              MOV      r5,r0                 ;64
000006  6830              LDR      r0,[r6,#0]
000008  460c              MOV      r4,r1                 ;64
00000a  2710              MOVS     r7,#0x10
00000c  4338              ORRS     r0,r0,r7
00000e  6030              STR      r0,[r6,#0]
;;;66         FMC_Erase_User(Config0);
000010  01b0              LSLS     r0,r6,#6
000012  f7fffffe          BL       FMC_Erase_User
;;;67         FMC_Write_User(Config0, *data);
000016  01b0              LSLS     r0,r6,#6
000018  6829              LDR      r1,[r5,#0]
00001a  f7fffffe          BL       FMC_Write_User
;;;68         FMC_Write_User(Config1, *(data + 1));
00001e  6869              LDR      r1,[r5,#4]
000020  4d09              LDR      r5,|L4.72|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FMC_Write_User
;;;69     
;;;70         if (res) {
000028  2c00              CMP      r4,#0
00002a  d007              BEQ      |L4.60|
;;;71             FMC_Read_User(Config0, res);
00002c  4621              MOV      r1,r4
00002e  1f28              SUBS     r0,r5,#4
000030  f7fffffe          BL       FMC_Read_User
;;;72             FMC_Read_User(Config1, res + 1);
000034  1d21              ADDS     r1,r4,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       FMC_Read_User
                  |L4.60|
;;;73         }
;;;74     
;;;75         FMC_DISABLE_CFG_UPDATE();
00003c  6830              LDR      r0,[r6,#0]
00003e  43b8              BICS     r0,r0,r7
000040  6030              STR      r0,[r6,#0]
;;;76     }
000042  bdf8              POP      {r3-r7,pc}
;;;77     
                          ENDP

                  |L4.68|
                          DCD      0x5000c000
                  |L4.72|
                          DCD      0x00300004

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  response_buff
                          %        64
                  aprom_buf
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  StartAddress
                          DCD      0x00000000
                  StartAddress_bak
                          DCD      0x00000000
                  TotalLen
                          DCD      0x00000000
                  TotalLen_bak
                          DCD      0x00000000
                  LastDataLen
                          DCD      0x00000000
                  g_packno
                          DCD      0x00000001
                  gcmd
                          DCD      0x00000000
                  bUpdateApromCmd
                          DCD      0x00000000
                  g_apromSize
                          DCD      0x00000000
                  g_dataFlashAddr
                          DCD      0x00000000
                  g_dataFlashSize
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\ISP_USER.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_EraseAP____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_ISP_USER_c_EraseAP____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_EraseAP____REVSH|
#line 402
|__asm___10_ISP_USER_c_EraseAP____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
