<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ARGlass.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ARGlass.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Sep 06 16:03:29 2019
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_IRQHandler &rArr; EP3_Handler &rArr; Hid_Transfer_Data &rArr; HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[32]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[28]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[29]">DAC_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[e]">EINT0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[f]">EINT1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[10]">GPABC_IRQHandler</a> from key.o(i.GPABC_IRQHandler) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[11]">GPDEF_IRQHandler</a> from key.o(i.GPDEF_IRQHandler) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[2f]">HID_ClassRequest</a> from hid_transfer.o(i.HID_ClassRequest) referenced from main.o(i.USB_Init)
 <LI><a href="#[1d]">HIRC_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[2b]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[1e]">I2C0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[1f]">I2C1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[26]">I2S_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[24]">LCD_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[25]">PDMA_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[27]">PDWU_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[12]">PWM0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[30]">Reset_Handler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[21]">SC0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[22]">SC1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[20]">SC2_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[1a]">SPI0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[14]">TMR0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[15]">TMR1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[16]">TMR2_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[17]">TMR3_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from startup_nano100series.o(.text) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[23]">USBD_IRQHandler</a> from hid_transfer.o(i.USBD_IRQHandler) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from main.o(i.WDT_IRQHandler) referenced from startup_nano100series.o(RESET)
 <LI><a href="#[31]">__main</a> from __main.o(!!!main) referenced from startup_nano100series.o(.text)
 <LI><a href="#[2e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2d]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[37]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[38]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[110]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[111]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[112]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[113]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[114]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[115]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[116]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[120]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[121]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[44]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[40]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Hid_Transfer_Data &rArr; HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[63]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[43]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[45]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[30]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_nano100series.o(.text))

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nano100series.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dl_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dl_flag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_flag_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDEF_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPABC_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[39]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[12e]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
</UL>

<P><STRONG><a name="[12f]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
</UL>

<P><STRONG><a name="[130]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bright_Weak
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bright_Strong
</UL>

<P><STRONG><a name="[133]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[136]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[52]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[55]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[58]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[57]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[138]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[139]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[13a]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[13b]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[13c]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[13d]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4b]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[60]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[42]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[140]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>ALP_ReadI2C_Byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_alsps.o(i.ALP_ReadI2C_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ALP_ReadI2C_Byte &rArr; LP_ReadI2C_Byte &rArr; iic_read_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ReadI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_read_ps
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_VendorID
</UL>

<P><STRONG><a name="[142]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>ALP_WriteI2C_Byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_alsps.o(i.ALP_WriteI2C_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ALP_WriteI2C_Byte &rArr; LP_WriteI2C_Byte &rArr; iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_WriteI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_set_threshold
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_alsps_init
</UL>

<P><STRONG><a name="[68]"></a>AlspsPro</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_alsps.o(i.AlspsPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AlspsPro &rArr; sy3096ps_enable &rArr; sy3096ps_set_threshold &rArr; ALP_WriteI2C_Byte &rArr; LP_WriteI2C_Byte &rArr; iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_process_data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_VendorID
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Backlight_Interrupt_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, key.o(i.Backlight_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Backlight_Interrupt_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[70]"></a>BrightHandler</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, backlight.o(i.BrightHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BrightHandler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bright_Weak
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bright_Strong
</UL>

<P><STRONG><a name="[74]"></a>Bright_Strong</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, backlight.o(i.Bright_Strong))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bright_Strong &rArr; BrightHandler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPABC_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>Bright_Weak</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, backlight.o(i.Bright_Weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bright_Weak &rArr; BrightHandler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPABC_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_spi2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Spi1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[77]"></a>CLK_EnablePLL</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[7b]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[7c]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
</UL>

<P><STRONG><a name="[7a]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[7e]"></a>CLK_SetCoreClock</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[7f]"></a>CLK_SetHCLK</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[93]"></a>CLK_SetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_spi2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Spi1_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[dc]"></a>CLK_SysTickDelay</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clk.o(i.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[79]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[a0]"></a>Change_Mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecx335af.o(i.Change_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDEF_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>Check_VendorID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i2c_alsps.o(i.Check_VendorID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Check_VendorID &rArr; ALP_ReadI2C_Byte &rArr; LP_ReadI2C_Byte &rArr; iic_read_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_ReadI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlspsPro
</UL>

<P><STRONG><a name="[c6]"></a>Data_Flash_Value_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcu_version.o(i.Data_Flash_Value_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
</UL>

<P><STRONG><a name="[80]"></a>ECX_PwrSv_1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecx335af.o(i.ECX_PwrSv_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ECX_PwrSv_1 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_Off
</UL>

<P><STRONG><a name="[82]"></a>ECX_PwrSv_2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecx335af.o(i.ECX_PwrSv_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ECX_PwrSv_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_Off
</UL>

<P><STRONG><a name="[d9]"></a>EP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hid_transfer.o(i.EP2_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>EP3_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hid_transfer.o(i.EP3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = EP3_Handler &rArr; Hid_Transfer_Data &rArr; HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>Ecx335af_Calibration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecx335af_calibration.o(i.Ecx335af_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ecx335af_Calibration &rArr; Set_Value_To_Ecx335af &rArr; Vertical_orbit_adjustment &rArr; Spi_ReadReg_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Value_To_Ecx335af
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
</UL>

<P><STRONG><a name="[88]"></a>Ecx335af_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ecx335af.o(i.Ecx335af_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ecx335af_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[89]"></a>Ecx335af_Power_Off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ecx335af.o(i.Ecx335af_Power_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ecx335af_Power_Off &rArr; ECX_PwrSv_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPABC_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>Ecx335af_Power_On</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ecx335af.o(i.Ecx335af_Power_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ecx335af_Power_On &rArr; BrightHandler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6_1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_5
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_3
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPABC_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Ecx335af_spi2_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ecx335af.o(i.Ecx335af_spi2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ecx335af_spi2_init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vcali_From_Data_Flash
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dl_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dl_flag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
</UL>

<P><STRONG><a name="[98]"></a>FMC_Erase</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fmc.o(i.FMC_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
</UL>

<P><STRONG><a name="[c5]"></a>FMC_GetBootSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fmc.o(i.FMC_GetBootSource))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
</UL>

<P><STRONG><a name="[a4]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vcali_From_Data_Flash
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dl_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dl_flag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
</UL>

<P><STRONG><a name="[96]"></a>FMC_Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(i.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vcali_From_Data_Flash
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dl_flag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
</UL>

<P><STRONG><a name="[9b]"></a>FMC_ReadCID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fmc.o(i.FMC_ReadCID))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_Test
</UL>

<P><STRONG><a name="[95]"></a>FMC_ReadConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fmc.o(i.FMC_ReadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_ReadConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_flash_base
</UL>

<P><STRONG><a name="[9f]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fmc.o(i.FMC_ReadDataFlashBaseAddr))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_Test
</UL>

<P><STRONG><a name="[9c]"></a>FMC_ReadPID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fmc.o(i.FMC_ReadPID))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_Test
</UL>

<P><STRONG><a name="[9e]"></a>FMC_ReadUCID</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fmc.o(i.FMC_ReadUCID))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_Test
</UL>

<P><STRONG><a name="[9d]"></a>FMC_ReadUID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(i.FMC_ReadUID))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_Test
</UL>

<P><STRONG><a name="[99]"></a>FMC_Write</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fmc.o(i.FMC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dl_flag
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
</UL>

<P><STRONG><a name="[97]"></a>FMC_WriteConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fmc.o(i.FMC_WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_flash_base
</UL>

<P><STRONG><a name="[9a]"></a>Fmc_Test</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mcu_version.o(i.Fmc_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fmc_Test
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadUID
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadUCID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadPID
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadDataFlashBaseAddr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadCID
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
</UL>

<P><STRONG><a name="[10]"></a>GPABC_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, key.o(i.GPABC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GPABC_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_Off
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bright_Weak
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bright_Strong
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPDEF_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, key.o(i.GPDEF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GPDEF_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Mode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO_EnableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Interrupt_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Change_Interrupt_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Interrupt_Init
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_spi2_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Interrupt_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Change_Interrupt_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Interrupt_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Spi1_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[a2]"></a>Get_Mcu_Version</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mcu_version.o(i.Get_Mcu_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Get_Mcu_Version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_version_init
</UL>

<P><STRONG><a name="[a6]"></a>Get_Vcali_From_Data_Flash</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ecx335af_calibration.o(i.Get_Vcali_From_Data_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Vcali_From_Data_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>HID_ClassRequest</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hid_transfer.o(i.HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HID_ClassRequest &rArr; USBD_GetSetupPacket &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStall
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetSetupPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.USB_Init)
</UL>
<P><STRONG><a name="[aa]"></a>HID_CmdImuData</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, hid_transfer.o(i.HID_CmdImuData))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Mag_Raw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Gyro_Raw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Acc_Raw
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vcali_From_Data_Flash
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Calibration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Mode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
</UL>

<P><STRONG><a name="[df]"></a>HID_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hid_transfer.o(i.HID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[2b]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[84]"></a>Hid_Transfer_Data</STRONG> (Thumb, 278 bytes, Stack size 96 bytes, hid_transfer.o(i.Hid_Transfer_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Hid_Transfer_Data &rArr; HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_Handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>Horizontal_orbit_adjustment</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecx335af_calibration.o(i.Horizontal_orbit_adjustment))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Horizontal_orbit_adjustment &rArr; Spi_ReadReg_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Value_To_Ecx335af
</UL>

<P><STRONG><a name="[ac]"></a>Imu_Acc_Raw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, imu_spi.o(i.Imu_Acc_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Imu_Acc_Raw
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
</UL>

<P><STRONG><a name="[ab]"></a>Imu_Gyro_Raw</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, imu_spi.o(i.Imu_Gyro_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Imu_Gyro_Raw
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
</UL>

<P><STRONG><a name="[ad]"></a>Imu_Mag_Raw</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, imu_spi.o(i.Imu_Mag_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImuData
</UL>

<P><STRONG><a name="[bc]"></a>Imu_Spi1_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, imu_spi.o(i.Imu_Spi1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Imu_Spi1_Init &rArr; SPI_Open &rArr; SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>Interrupt_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Interrupt_Init &rArr; PS_Interrupt_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Interrupt_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Change_Interrupt_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Interrupt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>LP_ReadI2C_Byte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lp_i2c.o(i.LP_ReadI2C_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LP_ReadI2C_Byte &rArr; iic_read_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_ReadI2C_Byte
</UL>

<P><STRONG><a name="[67]"></a>LP_WriteI2C_Byte</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lp_i2c.o(i.LP_WriteI2C_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LP_WriteI2C_Byte &rArr; iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_WriteI2C_Byte
</UL>

<P><STRONG><a name="[c3]"></a>MCU_FMC_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mcu_version.o(i.MCU_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MCU_FMC_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_Test
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Flash_Value_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_flash_base
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetBootSource
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_version_init
</UL>

<P><STRONG><a name="[bf]"></a>Mode_Change_Interrupt_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, key.o(i.Mode_Change_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mode_Change_Interrupt_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[c0]"></a>PS_Interrupt_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, i2c_alsps.o(i.PS_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PS_Interrupt_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[bd]"></a>SPI_Open</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Open &rArr; SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Spi1_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>SPI_SetBusClock</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, spi.o(i.SPI_SetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[c8]"></a>SYS_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cc]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[b1]"></a>Set_Mcu_Version</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mcu_version.o(i.Set_Mcu_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Set_Mcu_Version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_version_init
</UL>

<P><STRONG><a name="[87]"></a>Set_Value_To_Ecx335af</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecx335af_calibration.o(i.Set_Value_To_Ecx335af))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_Value_To_Ecx335af &rArr; Vertical_orbit_adjustment &rArr; Spi_ReadReg_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_orbit_adjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_orbit_adjustment
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Calibration
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Set_Vcali_To_Data_Flash</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ecx335af_calibration.o(i.Set_Vcali_To_Data_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Vcali_To_Data_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Calibration
</UL>

<P><STRONG><a name="[b4]"></a>Spi_ReadReg_1</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, ecx335af.o(i.Spi_ReadReg_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi_ReadReg_1 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_orbit_adjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_orbit_adjustment
</UL>

<P><STRONG><a name="[b5]"></a>Spi_ReadReg_2</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, ecx335af.o(i.Spi_ReadReg_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi_ReadReg_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_orbit_adjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_orbit_adjustment
</UL>

<P><STRONG><a name="[b6]"></a>Spi_ReadReg_Acc</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, imu_spi.o(i.Spi_ReadReg_Acc))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Acc_Raw
</UL>

<P><STRONG><a name="[b7]"></a>Spi_ReadReg_Gyro</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, imu_spi.o(i.Spi_ReadReg_Gyro))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Gyro_Raw
</UL>

<P><STRONG><a name="[b8]"></a>Spi_ReadReg_Mag</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, imu_spi.o(i.Spi_ReadReg_Mag))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Mag_Raw
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_power_mode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_data_rate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init_trim_registers
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_power_mode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_data_rate
</UL>

<P><STRONG><a name="[72]"></a>Spi_WriteReg_1</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ecx335af.o(i.Spi_WriteReg_1))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6_1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_5
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_3
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_orbit_adjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_orbit_adjustment
</UL>

<P><STRONG><a name="[73]"></a>Spi_WriteReg_2</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ecx335af.o(i.Spi_WriteReg_2))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6_1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_5
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_3
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_orbit_adjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_orbit_adjustment
</UL>

<P><STRONG><a name="[101]"></a>Spi_WriteReg_Acc</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, imu_spi.o(i.Spi_WriteReg_Acc))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
</UL>

<P><STRONG><a name="[100]"></a>Spi_WriteReg_Gyro</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, imu_spi.o(i.Spi_WriteReg_Gyro))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
</UL>

<P><STRONG><a name="[ed]"></a>Spi_WriteReg_Mag</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, imu_spi.o(i.Spi_WriteReg_Mag))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_Z
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_XY
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_power_mode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_data_rate
</UL>

<P><STRONG><a name="[ce]"></a>SysGet_HCLKFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, system_nano100series.o(i.SysGet_HCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[cf]"></a>SysGet_PLLClockFreq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, system_nano100series.o(i.SysGet_PLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[7d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_nano100series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[d0]"></a>UART_Open</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_Open &rArr; SysGet_PLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>USBD_CtrlIn</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, usbd.o(i.USBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>USBD_CtrlOut</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd.o(i.USBD_CtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlOut &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>USBD_GetDescriptor</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, usbd.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlOut
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[a8]"></a>USBD_GetSetupPacket</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd.o(i.USBD_GetSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetSetupPacket &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[23]"></a>USBD_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, hid_transfer.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = USBD_IRQHandler &rArr; EP3_Handler &rArr; Hid_Transfer_Data &rArr; HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_Handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SwReset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>USBD_Open</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbd.o(i.USBD_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[d5]"></a>USBD_PrepareCtrlIn</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd.o(i.USBD_PrepareCtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[d6]"></a>USBD_PrepareCtrlOut</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd.o(i.USBD_PrepareCtrlOut))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[d8]"></a>USBD_ProcessSetupPacket</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbd.o(i.USBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>USBD_StandardRequest</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, usbd.o(i.USBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn &rArr; USBD_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlOut
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[db]"></a>USBD_Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[d7]"></a>USBD_SwReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usbd.o(i.USBD_SwReset))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>USB_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_Init &rArr; USBD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>Vertical_orbit_adjustment</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecx335af_calibration.o(i.Vertical_orbit_adjustment))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Vertical_orbit_adjustment &rArr; Spi_ReadReg_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Value_To_Ecx335af
</UL>

<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WDT_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano100series.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>WDT_Open</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, wdt.o(i.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, backlight.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightHandler
</UL>

<P><STRONG><a name="[4e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b9]"></a>bmm050_compensate_X_float</STRONG> (Thumb, 394 bytes, Stack size 144 bytes, imu_spi.o(i.bmm050_compensate_X_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmm050_compensate_X_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Mag_Raw
</UL>

<P><STRONG><a name="[ba]"></a>bmm050_compensate_Y_float</STRONG> (Thumb, 394 bytes, Stack size 144 bytes, imu_spi.o(i.bmm050_compensate_Y_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Mag_Raw
</UL>

<P><STRONG><a name="[bb]"></a>bmm050_compensate_Z_float</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, imu_spi.o(i.bmm050_compensate_Z_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bmm050_compensate_Z_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Mag_Raw
</UL>

<P><STRONG><a name="[e9]"></a>bmm050_get_data_rate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_get_data_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm050_get_data_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
</UL>

<P><STRONG><a name="[ea]"></a>bmm050_get_power_mode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_get_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm050_get_power_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state
</UL>

<P><STRONG><a name="[eb]"></a>bmm050_init_trim_registers</STRONG> (Thumb, 302 bytes, Stack size 12 bytes, imu_spi.o(i.bmm050_init_trim_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bmm050_init_trim_registers
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
</UL>

<P><STRONG><a name="[ec]"></a>bmm050_set_data_rate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_set_data_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm050_set_data_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Mag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode
</UL>

<P><STRONG><a name="[ee]"></a>bmm050_set_functional_state</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_set_functional_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmm050_set_functional_state &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_power_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_power_mode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Mag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
</UL>

<P><STRONG><a name="[ef]"></a>bmm050_set_power_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm050_set_power_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Mag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state
</UL>

<P><STRONG><a name="[f0]"></a>bmm050_set_presetmode</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, imu_spi.o(i.bmm050_set_presetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bmm050_set_presetmode &rArr; bmm050_set_rep_Z
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_Z
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_XY
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_data_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
</UL>

<P><STRONG><a name="[f1]"></a>bmm050_set_rep_XY</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_set_rep_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm050_set_rep_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode
</UL>

<P><STRONG><a name="[f2]"></a>bmm050_set_rep_Z</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, imu_spi.o(i.bmm050_set_rep_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm050_set_rep_Z
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode
</UL>

<P><STRONG><a name="[81]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6_1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_5
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_3
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECX_PwrSv_1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_orbit_adjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_orbit_adjustment
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDEF_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPABC_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state
</UL>

<P><STRONG><a name="[f3]"></a>dl_flag_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, download_flag.o(i.dl_flag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dl_flag_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>get_dl_flag</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, download_flag.o(i.get_dl_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_dl_flag &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>i2c_alsps_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c_alsps.o(i.i2c_alsps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = i2c_alsps_init &rArr; sy3096ps_set_threshold &rArr; ALP_WriteI2C_Byte &rArr; LP_WriteI2C_Byte &rArr; iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_set_threshold
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_WriteI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>init_imu_chip</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, imu_spi.o(i.init_imu_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_imu_chip &rArr; bmm050_set_functional_state &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_power_mode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_data_rate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init_trim_registers
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_data_rate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Gyro
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_Acc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadReg_Mag
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; Hid_Transfer_Data &rArr; HID_CmdImuData &rArr; Imu_Mag_Raw &rArr; bmm050_compensate_Y_float &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vcali_From_Data_Flash
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_spi2_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dl_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dl_flag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_flag_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_alsps_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlspsPro
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_version_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Value_To_Ecx335af
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_imu_chip
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Spi1_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[102]"></a>mcu_version_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mcu_version.o(i.mcu_version_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mcu_version_init &rArr; Set_Mcu_Version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>set_boot_flags</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, download_flag.o(i.set_boot_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = set_boot_flags &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>set_dl_flag</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, download_flag.o(i.set_dl_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = set_dl_flag &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[8b]"></a>step_1</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ecx335af.o(i.step_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_1 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[8c]"></a>step_2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecx335af.o(i.step_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_2 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[8d]"></a>step_3</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecx335af.o(i.step_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_3 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[8e]"></a>step_4</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecx335af.o(i.step_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_4 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[8f]"></a>step_5</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ecx335af.o(i.step_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_5 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[90]"></a>step_6</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecx335af.o(i.step_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_6 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[91]"></a>step_6_1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecx335af.o(i.step_6_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = step_6_1 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteReg_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecx335af_Power_On
</UL>

<P><STRONG><a name="[6b]"></a>sy3096ps_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c_alsps.o(i.sy3096ps_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sy3096ps_enable &rArr; sy3096ps_set_threshold &rArr; ALP_WriteI2C_Byte &rArr; LP_WriteI2C_Byte &rArr; iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_set_threshold
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_WriteI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlspsPro
</UL>

<P><STRONG><a name="[6a]"></a>sy3096ps_process_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c_alsps.o(i.sy3096ps_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sy3096ps_process_data &rArr; sy3096ps_read_ps &rArr; ALP_ReadI2C_Byte &rArr; LP_ReadI2C_Byte &rArr; iic_read_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_read_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlspsPro
</UL>

<P><STRONG><a name="[105]"></a>sy3096ps_read_ps</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_alsps.o(i.sy3096ps_read_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sy3096ps_read_ps &rArr; ALP_ReadI2C_Byte &rArr; LP_ReadI2C_Byte &rArr; iic_read_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_ReadI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_process_data
</UL>

<P><STRONG><a name="[f7]"></a>sy3096ps_set_threshold</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c_alsps.o(i.sy3096ps_set_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sy3096ps_set_threshold &rArr; ALP_WriteI2C_Byte &rArr; LP_WriteI2C_Byte &rArr; iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALP_WriteI2C_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sy3096ps_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_alsps_init
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[106]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_float
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_float
</UL>

<P><STRONG><a name="[144]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_float
</UL>

<P><STRONG><a name="[108]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d2]"></a>USBD_MemCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd.o(i.USBD_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetSetupPacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
</UL>

<P><STRONG><a name="[b0]"></a>USBD_MemCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hid_transfer.o(i.USBD_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_Transfer_Data
</UL>

<P><STRONG><a name="[a9]"></a>USBD_SetStall</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hid_transfer.o(i.USBD_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[6f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, key.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Change_Interrupt_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Interrupt_Init
</UL>

<P><STRONG><a name="[a7]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ecx335af_calibration.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vcali_From_Data_Flash
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vcali_To_Data_Flash
</UL>

<P><STRONG><a name="[f8]"></a>iic_ack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lp_i2c.o(i.iic_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>

<P><STRONG><a name="[f9]"></a>iic_delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lp_i2c.o(i.iic_delay))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sendbyte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_nack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_ack
</UL>

<P><STRONG><a name="[fa]"></a>iic_nack</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lp_i2c.o(i.iic_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>

<P><STRONG><a name="[c1]"></a>iic_read_byte</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lp_i2c.o(i.iic_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iic_read_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sendbyte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_nack
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ReadI2C_Byte
</UL>

<P><STRONG><a name="[fd]"></a>iic_readbyte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lp_i2c.o(i.iic_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>

<P><STRONG><a name="[fc]"></a>iic_sendbyte</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lp_i2c.o(i.iic_sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>

<P><STRONG><a name="[fb]"></a>iic_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lp_i2c.o(i.iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>

<P><STRONG><a name="[fe]"></a>iic_stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lp_i2c.o(i.iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read_byte
</UL>

<P><STRONG><a name="[c2]"></a>iic_write_byte</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, lp_i2c.o(i.iic_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iic_write_byte &rArr; iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_WriteI2C_Byte
</UL>

<P><STRONG><a name="[a3]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu_version.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mcu_Version
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mcu_Version
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
</UL>

<P><STRONG><a name="[c4]"></a>set_data_flash_base</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mcu_version.o(i.set_data_flash_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_data_flash_base &rArr; FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_FMC_Init
</UL>

<P><STRONG><a name="[f5]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, download_flag.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_flags
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dl_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dl_flag
</UL>

<P><STRONG><a name="[e0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[ca]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[c9]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[54]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[53]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[109]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[107]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[49]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4a]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
